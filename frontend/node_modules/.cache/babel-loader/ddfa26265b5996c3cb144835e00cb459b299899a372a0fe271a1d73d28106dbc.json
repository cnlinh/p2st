{"ast":null,"code":"import \"core-js/modules/es.regexp.flags.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n/**\n  * vee-validate v4.11.1\n  * (c) 2023 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, computed, unref, ref, watch, nextTick, isRef, reactive, onUnmounted, toValue, onMounted, provide, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, readonly, watchEffect, shallowRef } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\nfunction isCallable(fn) {\n  return typeof fn === 'function';\n}\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\nconst isObject = obj => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n  return Number(value) >= 0;\n}\nfunction toNumber(value) {\n  const n = parseFloat(value);\n  return isNaN(n) ? value : n;\n}\nfunction isObjectLike(value) {\n  return typeof value === 'object' && value !== null;\n}\nfunction getTag(value) {\n  if (value == null) {\n    return value === undefined ? '[object Undefined]' : '[object Null]';\n  }\n  return Object.prototype.toString.call(value);\n}\n// Reference: https://github.com/lodash/lodash/blob/master/isPlainObject.js\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || getTag(value) !== '[object Object]') {\n    return false;\n  }\n  if (Object.getPrototypeOf(value) === null) {\n    return true;\n  }\n  let proto = value;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(value) === proto;\n}\nfunction merge(target, source) {\n  Object.keys(source).forEach(key => {\n    if (isPlainObject(source[key])) {\n      if (!target[key]) {\n        target[key] = {};\n      }\n      merge(target[key], source[key]);\n      return;\n    }\n    target[key] = source[key];\n  });\n  return target;\n}\n/**\n * Constructs a path with dot paths for arrays to use brackets to be compatible with vee-validate path syntax\n */\nfunction normalizeFormPath(path) {\n  const pathArr = path.split('.');\n  if (!pathArr.length) {\n    return '';\n  }\n  let fullPath = String(pathArr[0]);\n  for (let i = 1; i < pathArr.length; i++) {\n    if (isIndex(pathArr[i])) {\n      fullPath += `[${pathArr[i]}]`;\n      continue;\n    }\n    fullPath += `.${pathArr[i]}`;\n  }\n  return fullPath;\n}\nconst RULES = {};\n/**\n * Adds a custom validator to the list of validation rules.\n */\nfunction defineRule(id, validator) {\n  // makes sure new rules are properly formatted.\n  guardExtend(id, validator);\n  RULES[id] = validator;\n}\n/**\n * Gets an already defined rule\n */\nfunction resolveRule(id) {\n  return RULES[id];\n}\n/**\n * Guards from extension violations.\n */\nfunction guardExtend(id, validator) {\n  if (isCallable(validator)) {\n    return;\n  }\n  throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\nconst isClient = typeof window !== 'undefined';\nfunction isLocator(value) {\n  return isCallable(value) && !!value.__locatorRef;\n}\nfunction isTypedSchema(value) {\n  return !!value && isCallable(value.parse) && value.__type === 'VVTypedSchema';\n}\nfunction isYupValidator(value) {\n  return !!value && isCallable(value.validate);\n}\nfunction hasCheckedAttr(type) {\n  return type === 'checkbox' || type === 'radio';\n}\nfunction isContainerValue(value) {\n  return isObject(value) || Array.isArray(value);\n}\n/**\n * True if the value is an empty object or array\n */\nfunction isEmptyContainer(value) {\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n  return isObject(value) && Object.keys(value).length === 0;\n}\n/**\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\n */\nfunction isNotNestedPath(path) {\n  return /^\\[.+\\]$/i.test(path);\n}\n/**\n * Checks if an element is a native HTML5 multi-select input element\n */\nfunction isNativeMultiSelect(el) {\n  return isNativeSelect(el) && el.multiple;\n}\n/**\n * Checks if an element is a native HTML5 select input element\n */\nfunction isNativeSelect(el) {\n  return el.tagName === 'SELECT';\n}\n/**\n * Checks if a tag name with attrs object will render a native multi-select element\n */\nfunction isNativeMultiSelectNode(tag, attrs) {\n  // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n  const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n  return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\n * Checks if a node should have a `:value` binding or not\n *\n * These nodes should not have a value binding\n * For files, because they are not reactive\n * For multi-selects because the value binding will reset the value\n */\nfunction shouldHaveValueBinding(tag, attrs) {\n  return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\nfunction isFormSubmitEvent(evt) {\n  return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\nfunction isEvent(evt) {\n  if (!evt) {\n    return false;\n  }\n  if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n    return true;\n  }\n  // this is for IE and Cypress #3161\n  /* istanbul ignore next */\n  if (evt && evt.srcElement) {\n    return true;\n  }\n  return false;\n}\nfunction isPropPresent(obj, prop) {\n  return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\n * Compares if two values are the same borrowed from:\n * https://github.com/epoberezkin/fast-deep-equal\n * We added a case for file matching since `Object.keys` doesn't work with Files.\n * */\nfunction isEqual(a, b) {\n  if (a === b) return true;\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) return false;\n    // eslint-disable-next-line no-var\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (!isEqual(a[i], b[i])) return false;\n      return true;\n    }\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n      for (i of a.entries()) if (!isEqual(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n    // We added this part for file comparison, arguably a little naive but should work for most cases.\n    // #3911\n    if (isFile(a) && isFile(b)) {\n      if (a.size !== b.size) return false;\n      if (a.name !== b.name) return false;\n      if (a.lastModified !== b.lastModified) return false;\n      if (a.type !== b.type) return false;\n      return true;\n    }\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n      return true;\n    }\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n      return true;\n    }\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    for (i = length; i-- !== 0;) {\n      // eslint-disable-next-line no-var\n      var key = keys[i];\n      if (!isEqual(a[key], b[key])) return false;\n    }\n    return true;\n  }\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b;\n}\nfunction isFile(a) {\n  if (!isClient) {\n    return false;\n  }\n  return a instanceof File;\n}\nfunction set(obj, key, val) {\n  if (typeof val.value === 'object') val.value = klona(val.value);\n  if (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n    Object.defineProperty(obj, key, val);\n  } else obj[key] = val.value;\n}\nfunction klona(x) {\n  if (typeof x !== 'object') return x;\n  var i = 0,\n    k,\n    list,\n    tmp,\n    str = Object.prototype.toString.call(x);\n  if (str === '[object Object]') {\n    tmp = Object.create(x.__proto__ || null);\n  } else if (str === '[object Array]') {\n    tmp = Array(x.length);\n  } else if (str === '[object Set]') {\n    tmp = new Set();\n    x.forEach(function (val) {\n      tmp.add(klona(val));\n    });\n  } else if (str === '[object Map]') {\n    tmp = new Map();\n    x.forEach(function (val, key) {\n      tmp.set(klona(key), klona(val));\n    });\n  } else if (str === '[object Date]') {\n    tmp = new Date(+x);\n  } else if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n  } else if (str === '[object DataView]') {\n    tmp = new x.constructor(klona(x.buffer));\n  } else if (str === '[object ArrayBuffer]') {\n    tmp = x.slice(0);\n  } else if (str.slice(-6) === 'Array]') {\n    // ArrayBuffer.isView(x)\n    // ~> `new` bcuz `Buffer.slice` => ref\n    tmp = new x.constructor(x);\n  }\n  if (tmp) {\n    for (list = Object.getOwnPropertySymbols(x); i < list.length; i++) {\n      set(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n    }\n    for (i = 0, list = Object.getOwnPropertyNames(x); i < list.length; i++) {\n      if (Object.hasOwnProperty.call(tmp, k = list[i]) && tmp[k] === x[k]) continue;\n      set(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n    }\n  }\n  return tmp || x;\n}\nfunction cleanupNonNestedPath(path) {\n  if (isNotNestedPath(path)) {\n    return path.replace(/\\[|\\]/gi, '');\n  }\n  return path;\n}\nfunction getFromPath(object, path, fallback) {\n  if (!object) {\n    return fallback;\n  }\n  if (isNotNestedPath(path)) {\n    return object[cleanupNonNestedPath(path)];\n  }\n  const resolvedValue = (path || '').split(/\\.|\\[(\\d+)\\]/).filter(Boolean).reduce((acc, propKey) => {\n    if (isContainerValue(acc) && propKey in acc) {\n      return acc[propKey];\n    }\n    return fallback;\n  }, object);\n  return resolvedValue;\n}\n/**\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\n */\nfunction setInPath(object, path, value) {\n  if (isNotNestedPath(path)) {\n    object[cleanupNonNestedPath(path)] = value;\n    return;\n  }\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, set it\n    if (i === keys.length - 1) {\n      acc[keys[i]] = value;\n      return;\n    }\n    // Key does not exist, create a container for it\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      // container can be either an object or an array depending on the next key if it exists\n      acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n    }\n    acc = acc[keys[i]];\n  }\n}\nfunction unset(object, key) {\n  if (Array.isArray(object) && isIndex(key)) {\n    object.splice(Number(key), 1);\n    return;\n  }\n  if (isObject(object)) {\n    delete object[key];\n  }\n}\n/**\n * Removes a nested property from object\n */\nfunction unsetPath(object, path) {\n  if (isNotNestedPath(path)) {\n    delete object[cleanupNonNestedPath(path)];\n    return;\n  }\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, unset it\n    if (i === keys.length - 1) {\n      unset(acc, keys[i]);\n      break;\n    }\n    // Key does not exist, exit\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      break;\n    }\n    acc = acc[keys[i]];\n  }\n  const pathValues = keys.map((_, idx) => {\n    return getFromPath(object, keys.slice(0, idx).join('.'));\n  });\n  for (let i = pathValues.length - 1; i >= 0; i--) {\n    if (!isEmptyContainer(pathValues[i])) {\n      continue;\n    }\n    if (i === 0) {\n      unset(object, keys[0]);\n      continue;\n    }\n    unset(pathValues[i - 1], keys[i - 1]);\n  }\n}\n/**\n * A typed version of Object.keys\n */\nfunction keysOf(record) {\n  return Object.keys(record);\n}\n// Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\nfunction injectWithSelf(symbol) {\n  let def = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  const vm = getCurrentInstance();\n  return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\nfunction warn(message) {\n  warn$1(`[vee-validate]: ${message}`);\n}\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n  if (Array.isArray(currentValue)) {\n    const newVal = [...currentValue];\n    // Use isEqual since checked object values can possibly fail the equality check #3883\n    const idx = newVal.findIndex(v => isEqual(v, checkedValue));\n    idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n    return newVal;\n  }\n  return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\n * (`limit`)\n */\nfunction throttle(func, limit) {\n  let inThrottle;\n  let lastResult;\n  return function () {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n    if (!inThrottle) {\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      lastResult = func.apply(context, args);\n    }\n    return lastResult;\n  };\n}\nfunction debounceAsync(inner) {\n  let ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let timer = null;\n  let resolves = [];\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    // Run the function after a certain amount of time\n    if (timer) {\n      clearTimeout(timer);\n    }\n    // @ts-expect-error timer is a number\n    timer = setTimeout(() => {\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n    }, ms);\n    return new Promise(resolve => resolves.push(resolve));\n  };\n}\nfunction applyModelModifiers(value, modifiers) {\n  if (!isObject(modifiers)) {\n    return value;\n  }\n  if (modifiers.number) {\n    return toNumber(value);\n  }\n  return value;\n}\nfunction withLatest(fn, onDone) {\n  let latestRun;\n  return async function runLatest() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    const pending = fn(...args);\n    latestRun = pending;\n    const result = await pending;\n    if (pending !== latestRun) {\n      return result;\n    }\n    latestRun = undefined;\n    onDone(result, args);\n    return result;\n  };\n}\nfunction computedDeep(_ref) {\n  let {\n    get,\n    set\n  } = _ref;\n  const baseRef = ref(klona(get()));\n  watch(get, newValue => {\n    if (isEqual(newValue, baseRef.value)) {\n      return;\n    }\n    baseRef.value = klona(newValue);\n  }, {\n    deep: true\n  });\n  watch(baseRef, newValue => {\n    if (isEqual(newValue, get())) {\n      return;\n    }\n    set(klona(newValue));\n  }, {\n    deep: true\n  });\n  return baseRef;\n}\nfunction normalizeErrorItem(message) {\n  return Array.isArray(message) ? message : message ? [message] : [];\n}\nfunction resolveFieldOrPathState(path) {\n  const form = injectWithSelf(FormContextKey);\n  const state = path ? computed(() => form === null || form === void 0 ? void 0 : form.getPathState(unref(path))) : undefined;\n  const field = path ? undefined : inject(FieldContextKey);\n  if (!field && !(state === null || state === void 0 ? void 0 : state.value)) {\n    warn(`field with name ${unref(path)} was not found`);\n  }\n  return state || field;\n}\nfunction omit(obj, keys) {\n  const target = {};\n  for (const key in obj) {\n    if (!keys.includes(key)) {\n      target[key] = obj[key];\n    }\n  }\n  return target;\n}\nfunction debounceNextTick(inner) {\n  let lastTick = null;\n  let resolves = [];\n  return function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    // Run the function after a certain amount of time\n    const thisTick = nextTick(() => {\n      if (lastTick !== thisTick) {\n        return;\n      }\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n      lastTick = null;\n    });\n    lastTick = thisTick;\n    return new Promise(resolve => resolves.push(resolve));\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst normalizeChildren = (tag, context, slotProps) => {\n  if (!context.slots.default) {\n    return context.slots.default;\n  }\n  if (typeof tag === 'string' || !tag) {\n    return context.slots.default(slotProps());\n  }\n  return {\n    default: () => {\n      var _a, _b;\n      return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps());\n    }\n  };\n};\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction getBoundValue(el) {\n  if (hasValueBinding(el)) {\n    return el._value;\n  }\n  return undefined;\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction hasValueBinding(el) {\n  return '_value' in el;\n}\nfunction parseInputValue(el) {\n  if (el.type === 'number') {\n    return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n  }\n  if (el.type === 'range') {\n    return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n  }\n  return el.value;\n}\nfunction normalizeEventValue(value) {\n  if (!isEvent(value)) {\n    return value;\n  }\n  const input = value.target;\n  // Vue sets the current bound value on `_value` prop\n  // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n  if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n    return getBoundValue(input);\n  }\n  if (input.type === 'file' && input.files) {\n    const files = Array.from(input.files);\n    return input.multiple ? files : files[0];\n  }\n  if (isNativeMultiSelect(input)) {\n    return Array.from(input.options).filter(opt => opt.selected && !opt.disabled).map(getBoundValue);\n  }\n  // makes sure we get the actual `option` bound value\n  // #3440\n  if (isNativeSelect(input)) {\n    const selectedOption = Array.from(input.options).find(opt => opt.selected);\n    return selectedOption ? getBoundValue(selectedOption) : input.value;\n  }\n  return parseInputValue(input);\n}\n\n/**\n * Normalizes the given rules expression.\n */\nfunction normalizeRules(rules) {\n  const acc = {};\n  Object.defineProperty(acc, '_$$isNormalized', {\n    value: true,\n    writable: false,\n    enumerable: false,\n    configurable: false\n  });\n  if (!rules) {\n    return acc;\n  }\n  // Object is already normalized, skip.\n  if (isObject(rules) && rules._$$isNormalized) {\n    return rules;\n  }\n  if (isObject(rules)) {\n    return Object.keys(rules).reduce((prev, curr) => {\n      const params = normalizeParams(rules[curr]);\n      if (rules[curr] !== false) {\n        prev[curr] = buildParams(params);\n      }\n      return prev;\n    }, acc);\n  }\n  /* istanbul ignore if */\n  if (typeof rules !== 'string') {\n    return acc;\n  }\n  return rules.split('|').reduce((prev, rule) => {\n    const parsedRule = parseRule(rule);\n    if (!parsedRule.name) {\n      return prev;\n    }\n    prev[parsedRule.name] = buildParams(parsedRule.params);\n    return prev;\n  }, acc);\n}\n/**\n * Normalizes a rule param.\n */\nfunction normalizeParams(params) {\n  if (params === true) {\n    return [];\n  }\n  if (Array.isArray(params)) {\n    return params;\n  }\n  if (isObject(params)) {\n    return params;\n  }\n  return [params];\n}\nfunction buildParams(provided) {\n  const mapValueToLocator = value => {\n    // A target param using interpolation\n    if (typeof value === 'string' && value[0] === '@') {\n      return createLocator(value.slice(1));\n    }\n    return value;\n  };\n  if (Array.isArray(provided)) {\n    return provided.map(mapValueToLocator);\n  }\n  // #3073\n  if (provided instanceof RegExp) {\n    return [provided];\n  }\n  return Object.keys(provided).reduce((prev, key) => {\n    prev[key] = mapValueToLocator(provided[key]);\n    return prev;\n  }, {});\n}\n/**\n * Parses a rule string expression.\n */\nconst parseRule = rule => {\n  let params = [];\n  const name = rule.split(':')[0];\n  if (rule.includes(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n  return {\n    name,\n    params\n  };\n};\nfunction createLocator(value) {\n  const locator = crossTable => {\n    const val = getFromPath(crossTable, value) || crossTable[value];\n    return val;\n  };\n  locator.__locatorRef = value;\n  return locator;\n}\nfunction extractLocators(params) {\n  if (Array.isArray(params)) {\n    return params.filter(isLocator);\n  }\n  return keysOf(params).filter(key => isLocator(params[key])).map(key => params[key]);\n}\nconst DEFAULT_CONFIG = {\n  generateMessage: _ref2 => {\n    let {\n      field\n    } = _ref2;\n    return `${field} is not valid.`;\n  },\n  bails: true,\n  validateOnBlur: true,\n  validateOnChange: true,\n  validateOnInput: false,\n  validateOnModelUpdate: true\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\nconst getConfig = () => currentConfig;\nconst setConfig = newConf => {\n  currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\nconst configure = setConfig;\n\n/**\n * Validates a value against the rules.\n */\nasync function validate(value, rules) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n  const field = {\n    name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n    rules,\n    label: options === null || options === void 0 ? void 0 : options.label,\n    bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n    formData: (options === null || options === void 0 ? void 0 : options.values) || {}\n  };\n  const result = await _validate(field, value);\n  const errors = result.errors;\n  return {\n    errors,\n    valid: !errors.length\n  };\n}\n/**\n * Starts the validation process.\n */\nasync function _validate(field, value) {\n  if (isTypedSchema(field.rules) || isYupValidator(field.rules)) {\n    return validateFieldWithTypedSchema(value, field.rules);\n  }\n  // if a generic function or chain of generic functions\n  if (isCallable(field.rules) || Array.isArray(field.rules)) {\n    const ctx = {\n      field: field.label || field.name,\n      name: field.name,\n      label: field.label,\n      form: field.formData,\n      value\n    };\n    // Normalize the pipeline\n    const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n    const length = pipeline.length;\n    const errors = [];\n    for (let i = 0; i < length; i++) {\n      const rule = pipeline[i];\n      const result = await rule(value, ctx);\n      const isValid = typeof result !== 'string' && !Array.isArray(result) && result;\n      if (isValid) {\n        continue;\n      }\n      if (Array.isArray(result)) {\n        errors.push(...result);\n      } else {\n        const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n        errors.push(message);\n      }\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n    return {\n      errors\n    };\n  }\n  const normalizedContext = Object.assign(Object.assign({}, field), {\n    rules: normalizeRules(field.rules)\n  });\n  const errors = [];\n  const rulesKeys = Object.keys(normalizedContext.rules);\n  const length = rulesKeys.length;\n  for (let i = 0; i < length; i++) {\n    const rule = rulesKeys[i];\n    const result = await _test(normalizedContext, value, {\n      name: rule,\n      params: normalizedContext.rules[rule]\n    });\n    if (result.error) {\n      errors.push(result.error);\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n  }\n  return {\n    errors\n  };\n}\nfunction isYupError(err) {\n  return !!err && err.name === 'ValidationError';\n}\nfunction yupToTypedSchema(yupSchema) {\n  const schema = {\n    __type: 'VVTypedSchema',\n    async parse(values) {\n      var _a;\n      try {\n        const output = await yupSchema.validate(values, {\n          abortEarly: false\n        });\n        return {\n          output,\n          errors: []\n        };\n      } catch (err) {\n        // Yup errors have a name prop one them.\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n        if (!isYupError(err)) {\n          throw err;\n        }\n        if (!((_a = err.inner) === null || _a === void 0 ? void 0 : _a.length) && err.errors.length) {\n          return {\n            errors: [{\n              path: err.path,\n              errors: err.errors\n            }]\n          };\n        }\n        const errors = err.inner.reduce((acc, curr) => {\n          const path = curr.path || '';\n          if (!acc[path]) {\n            acc[path] = {\n              errors: [],\n              path\n            };\n          }\n          acc[path].errors.push(...curr.errors);\n          return acc;\n        }, {});\n        return {\n          errors: Object.values(errors)\n        };\n      }\n    }\n  };\n  return schema;\n}\n/**\n * Handles yup validation\n */\nasync function validateFieldWithTypedSchema(value, schema) {\n  const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n  const result = await typedSchema.parse(value);\n  const messages = [];\n  for (const error of result.errors) {\n    if (error.errors.length) {\n      messages.push(...error.errors);\n    }\n  }\n  return {\n    errors: messages\n  };\n}\n/**\n * Tests a single input value against a rule.\n */\nasync function _test(field, value, rule) {\n  const validator = resolveRule(rule.name);\n  if (!validator) {\n    throw new Error(`No such validator '${rule.name}' exists.`);\n  }\n  const params = fillTargetValues(rule.params, field.formData);\n  const ctx = {\n    field: field.label || field.name,\n    name: field.name,\n    label: field.label,\n    value,\n    form: field.formData,\n    rule: Object.assign(Object.assign({}, rule), {\n      params\n    })\n  };\n  const result = await validator(value, params, ctx);\n  if (typeof result === 'string') {\n    return {\n      error: result\n    };\n  }\n  return {\n    error: result ? undefined : _generateFieldError(ctx)\n  };\n}\n/**\n * Generates error messages.\n */\nfunction _generateFieldError(fieldCtx) {\n  const message = getConfig().generateMessage;\n  if (!message) {\n    return 'Field is invalid';\n  }\n  return message(fieldCtx);\n}\nfunction fillTargetValues(params, crossTable) {\n  const normalize = value => {\n    if (isLocator(value)) {\n      return value(crossTable);\n    }\n    return value;\n  };\n  if (Array.isArray(params)) {\n    return params.map(normalize);\n  }\n  return Object.keys(params).reduce((acc, param) => {\n    acc[param] = normalize(params[param]);\n    return acc;\n  }, {});\n}\nasync function validateTypedSchema(schema, values) {\n  const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n  const validationResult = await typedSchema.parse(values);\n  const results = {};\n  const errors = {};\n  for (const error of validationResult.errors) {\n    const messages = error.errors;\n    // Fixes issue with path mapping with Yup 1.0 including quotes around array indices\n    const path = (error.path || '').replace(/\\[\"(\\d+)\"\\]/g, (_, m) => {\n      return `[${m}]`;\n    });\n    results[path] = {\n      valid: !messages.length,\n      errors: messages\n    };\n    if (messages.length) {\n      errors[path] = messages[0];\n    }\n  }\n  return {\n    valid: !validationResult.errors.length,\n    results,\n    errors,\n    values: validationResult.value\n  };\n}\nasync function validateObjectSchema(schema, values, opts) {\n  const paths = keysOf(schema);\n  const validations = paths.map(async path => {\n    var _a, _b, _c;\n    const strings = (_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path];\n    const fieldResult = await validate(getFromPath(values, path), schema[path], {\n      name: (strings === null || strings === void 0 ? void 0 : strings.name) || path,\n      label: strings === null || strings === void 0 ? void 0 : strings.label,\n      values: values,\n      bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true\n    });\n    return Object.assign(Object.assign({}, fieldResult), {\n      path\n    });\n  });\n  let isAllValid = true;\n  const validationResults = await Promise.all(validations);\n  const results = {};\n  const errors = {};\n  for (const result of validationResults) {\n    results[result.path] = {\n      valid: result.valid,\n      errors: result.errors\n    };\n    if (!result.valid) {\n      isAllValid = false;\n      errors[result.path] = result.errors[0];\n    }\n  }\n  return {\n    valid: isAllValid,\n    results,\n    errors\n  };\n}\nlet ID_COUNTER = 0;\nfunction useFieldState(path, init) {\n  const {\n    value,\n    initialValue,\n    setInitialValue\n  } = _useFieldValue(path, init.modelValue, init.form);\n  if (!init.form) {\n    const {\n      errors,\n      setErrors\n    } = createFieldErrors();\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n    const meta = createFieldMeta(value, initialValue, errors);\n    function setState(state) {\n      var _a;\n      if ('value' in state) {\n        value.value = state.value;\n      }\n      if ('errors' in state) {\n        setErrors(state.errors);\n      }\n      if ('touched' in state) {\n        meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n      }\n      if ('initialValue' in state) {\n        setInitialValue(state.initialValue);\n      }\n    }\n    return {\n      id,\n      path,\n      value,\n      initialValue,\n      meta,\n      flags: {\n        pendingUnmount: {\n          [id]: false\n        }\n      },\n      errors,\n      setState\n    };\n  }\n  const state = init.form.createPathState(path, {\n    bails: init.bails,\n    label: init.label,\n    type: init.type,\n    validate: init.validate\n  });\n  const errors = computed(() => state.errors);\n  function setState(state) {\n    var _a, _b, _c;\n    if ('value' in state) {\n      value.value = state.value;\n    }\n    if ('errors' in state) {\n      (_a = init.form) === null || _a === void 0 ? void 0 : _a.setFieldError(unref(path), state.errors);\n    }\n    if ('touched' in state) {\n      (_b = init.form) === null || _b === void 0 ? void 0 : _b.setFieldTouched(unref(path), (_c = state.touched) !== null && _c !== void 0 ? _c : false);\n    }\n    if ('initialValue' in state) {\n      setInitialValue(state.initialValue);\n    }\n  }\n  return {\n    id: Array.isArray(state.id) ? state.id[state.id.length - 1] : state.id,\n    path,\n    value,\n    errors,\n    meta: state,\n    initialValue,\n    flags: state.__flags,\n    setState\n  };\n}\n/**\n * Creates the field value and resolves the initial value\n */\nfunction _useFieldValue(path, modelValue, form) {\n  const modelRef = ref(unref(modelValue));\n  function resolveInitialValue() {\n    if (!form) {\n      return unref(modelRef);\n    }\n    return getFromPath(form.initialValues.value, unref(path), unref(modelRef));\n  }\n  function setInitialValue(value) {\n    if (!form) {\n      modelRef.value = value;\n      return;\n    }\n    form.stageInitialValue(unref(path), value, true);\n  }\n  const initialValue = computed(resolveInitialValue);\n  // if no form is associated, use a regular ref.\n  if (!form) {\n    const value = ref(resolveInitialValue());\n    return {\n      value,\n      initialValue,\n      setInitialValue\n    };\n  }\n  // to set the initial value, first check if there is a current value, if there is then use it.\n  // otherwise use the configured initial value if it exists.\n  // prioritize model value over form values\n  // #3429\n  const currentValue = resolveModelValue(modelValue, form, initialValue, path);\n  form.stageInitialValue(unref(path), currentValue, true);\n  // otherwise use a computed setter that triggers the `setFieldValue`\n  const value = computed({\n    get() {\n      return getFromPath(form.values, unref(path));\n    },\n    set(newVal) {\n      form.setFieldValue(unref(path), newVal, false);\n    }\n  });\n  return {\n    value,\n    initialValue,\n    setInitialValue\n  };\n}\n/*\n  to set the initial value, first check if there is a current value, if there is then use it.\n  otherwise use the configured initial value if it exists.\n  prioritize model value over form values\n  #3429\n*/\nfunction resolveModelValue(modelValue, form, initialValue, path) {\n  if (isRef(modelValue)) {\n    return unref(modelValue);\n  }\n  if (modelValue !== undefined) {\n    return modelValue;\n  }\n  return getFromPath(form.values, unref(path), unref(initialValue));\n}\n/**\n * Creates meta flags state and some associated effects with them\n */\nfunction createFieldMeta(currentValue, initialValue, errors) {\n  const meta = reactive({\n    touched: false,\n    pending: false,\n    valid: true,\n    validated: !!unref(errors).length,\n    initialValue: computed(() => unref(initialValue)),\n    dirty: computed(() => {\n      return !isEqual(unref(currentValue), unref(initialValue));\n    })\n  });\n  watch(errors, value => {\n    meta.valid = !value.length;\n  }, {\n    immediate: true,\n    flush: 'sync'\n  });\n  return meta;\n}\n/**\n * Creates the error message state for the field state\n */\nfunction createFieldErrors() {\n  const errors = ref([]);\n  return {\n    errors,\n    setErrors: messages => {\n      errors.value = normalizeErrorItem(messages);\n    }\n  };\n}\nfunction installDevtoolsPlugin(app) {\n  if (process.env.NODE_ENV !== 'production') {\n    setupDevtoolsPlugin({\n      id: 'vee-validate-devtools-plugin',\n      label: 'VeeValidate Plugin',\n      packageName: 'vee-validate',\n      homepage: 'https://vee-validate.logaretm.com/v4',\n      app,\n      logo: 'https://vee-validate.logaretm.com/v4/logo.png'\n    }, setupApiHooks);\n  }\n}\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n  setTimeout(async () => {\n    await nextTick();\n    API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n    API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n  }, 100);\n}, 100);\nfunction registerFormWithDevTools(form) {\n  const vm = getCurrentInstance();\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n    if (!app) {\n      return;\n    }\n    installDevtoolsPlugin(app);\n  }\n  DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n  DEVTOOLS_FORMS[form.formId]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FORMS[form.formId];\n    refreshInspector();\n  });\n  refreshInspector();\n}\nfunction registerSingleFieldWithDevtools(field) {\n  const vm = getCurrentInstance();\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n    if (!app) {\n      return;\n    }\n    installDevtoolsPlugin(app);\n  }\n  DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n  DEVTOOLS_FIELDS[field.id]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FIELDS[field.id];\n    refreshInspector();\n  });\n  refreshInspector();\n}\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n  error: 0xbd4b4b,\n  success: 0x06d77b,\n  unknown: 0x54436b,\n  white: 0xffffff,\n  black: 0x000000,\n  blue: 0x035397,\n  purple: 0xb980f0,\n  orange: 0xf5a962,\n  gray: 0xbbbfca\n};\nlet SELECTED_NODE = null;\nfunction setupApiHooks(api) {\n  API = api;\n  api.addInspector({\n    id: INSPECTOR_ID,\n    icon: 'rule',\n    label: 'vee-validate',\n    noSelectionText: 'Select a vee-validate node to inspect',\n    actions: [{\n      icon: 'done_outline',\n      tooltip: 'Validate selected item',\n      action: async () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n        if (SELECTED_NODE.type === 'field') {\n          await SELECTED_NODE.field.validate();\n          return;\n        }\n        if (SELECTED_NODE.type === 'form') {\n          await SELECTED_NODE.form.validate();\n          return;\n        }\n        if (SELECTED_NODE.type === 'pathState') {\n          await SELECTED_NODE.form.validateField(SELECTED_NODE.state.path);\n        }\n      }\n    }, {\n      icon: 'delete_sweep',\n      tooltip: 'Clear validation state of the selected item',\n      action: () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n        if (SELECTED_NODE.type === 'field') {\n          SELECTED_NODE.field.resetField();\n          return;\n        }\n        if (SELECTED_NODE.type === 'form') {\n          SELECTED_NODE.form.resetForm();\n        }\n        if (SELECTED_NODE.type === 'pathState') {\n          SELECTED_NODE.form.resetField(SELECTED_NODE.state.path);\n        }\n      }\n    }]\n  });\n  api.on.getInspectorTree(payload => {\n    if (payload.inspectorId !== INSPECTOR_ID) {\n      return;\n    }\n    const forms = Object.values(DEVTOOLS_FORMS);\n    const fields = Object.values(DEVTOOLS_FIELDS);\n    payload.rootNodes = [...forms.map(mapFormForDevtoolsInspector), ...fields.map(field => mapFieldForDevtoolsInspector(field))];\n  });\n  api.on.getInspectorState((payload, ctx) => {\n    if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n      return;\n    }\n    const {\n      form,\n      field,\n      state,\n      type\n    } = decodeNodeId(payload.nodeId);\n    if (form && type === 'form') {\n      payload.state = buildFormState(form);\n      SELECTED_NODE = {\n        type: 'form',\n        form\n      };\n      return;\n    }\n    if (state && type === 'pathState' && form) {\n      payload.state = buildFieldState(state);\n      SELECTED_NODE = {\n        type: 'pathState',\n        state,\n        form\n      };\n      return;\n    }\n    if (field && type === 'field') {\n      payload.state = buildFieldState({\n        errors: field.errors.value,\n        dirty: field.meta.dirty,\n        valid: field.meta.valid,\n        touched: field.meta.touched,\n        value: field.value.value,\n        initialValue: field.meta.initialValue\n      });\n      SELECTED_NODE = {\n        field,\n        type: 'field'\n      };\n      return;\n    }\n    SELECTED_NODE = null;\n  });\n}\nfunction mapFormForDevtoolsInspector(form) {\n  const {\n    textColor,\n    bgColor\n  } = getValidityColors(form.meta.value.valid);\n  const formTreeNodes = {};\n  Object.values(form.getAllPathStates()).forEach(state => {\n    setInPath(formTreeNodes, unref(state.path), mapPathForDevtoolsInspector(state, form));\n  });\n  function buildFormTree(tree) {\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const key = [...path].pop();\n    if ('id' in tree) {\n      return Object.assign(Object.assign({}, tree), {\n        label: key || tree.label\n      });\n    }\n    if (isObject(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: key || '',\n        children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key]))\n      };\n    }\n    if (Array.isArray(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: `${key}[]`,\n        children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)]))\n      };\n    }\n    return {\n      id: '',\n      label: '',\n      children: []\n    };\n  }\n  const {\n    children\n  } = buildFormTree(formTreeNodes);\n  return {\n    id: encodeNodeId(form),\n    label: 'Form',\n    children,\n    tags: [{\n      label: 'Form',\n      textColor,\n      backgroundColor: bgColor\n    }, {\n      label: `${form.getAllPathStates().length} fields`,\n      textColor: COLORS.white,\n      backgroundColor: COLORS.unknown\n    }]\n  };\n}\nfunction mapPathForDevtoolsInspector(state, form) {\n  return {\n    id: encodeNodeId(form, state),\n    label: unref(state.path),\n    tags: getFieldNodeTags(state.multiple, state.fieldsCount, state.type, state.valid, form)\n  };\n}\nfunction mapFieldForDevtoolsInspector(field, form) {\n  return {\n    id: encodeNodeId(form, field),\n    label: unref(field.name),\n    tags: getFieldNodeTags(false, 1, field.type, field.meta.valid, form)\n  };\n}\nfunction getFieldNodeTags(multiple, fieldsCount, type, valid, form) {\n  const {\n    textColor,\n    bgColor\n  } = getValidityColors(valid);\n  return [multiple ? undefined : {\n    label: 'Field',\n    textColor,\n    backgroundColor: bgColor\n  }, !form ? {\n    label: 'Standalone',\n    textColor: COLORS.black,\n    backgroundColor: COLORS.gray\n  } : undefined, type === 'checkbox' ? {\n    label: 'Checkbox',\n    textColor: COLORS.white,\n    backgroundColor: COLORS.blue\n  } : undefined, type === 'radio' ? {\n    label: 'Radio',\n    textColor: COLORS.white,\n    backgroundColor: COLORS.purple\n  } : undefined, multiple ? {\n    label: 'Multiple',\n    textColor: COLORS.black,\n    backgroundColor: COLORS.orange\n  } : undefined].filter(Boolean);\n}\nfunction encodeNodeId(form, stateOrField) {\n  const type = stateOrField ? 'path' in stateOrField ? 'pathState' : 'field' : 'form';\n  const fieldPath = stateOrField ? 'path' in stateOrField ? stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.path : unref(stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.name) : '';\n  const idObject = {\n    f: form === null || form === void 0 ? void 0 : form.formId,\n    ff: fieldPath,\n    type\n  };\n  return btoa(encodeURIComponent(JSON.stringify(idObject)));\n}\nfunction decodeNodeId(nodeId) {\n  try {\n    const idObject = JSON.parse(decodeURIComponent(atob(nodeId)));\n    const form = DEVTOOLS_FORMS[idObject.f];\n    if (!form && idObject.ff) {\n      const field = DEVTOOLS_FIELDS[idObject.ff];\n      if (!field) {\n        return {};\n      }\n      return {\n        type: idObject.type,\n        field\n      };\n    }\n    if (!form) {\n      return {};\n    }\n    const state = form.getPathState(idObject.ff);\n    return {\n      type: idObject.type,\n      form,\n      state\n    };\n  } catch (err) {\n    // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n  }\n  return {};\n}\nfunction buildFieldState(state) {\n  return {\n    'Field state': [{\n      key: 'errors',\n      value: state.errors\n    }, {\n      key: 'initialValue',\n      value: state.initialValue\n    }, {\n      key: 'currentValue',\n      value: state.value\n    }, {\n      key: 'touched',\n      value: state.touched\n    }, {\n      key: 'dirty',\n      value: state.dirty\n    }, {\n      key: 'valid',\n      value: state.valid\n    }]\n  };\n}\nfunction buildFormState(form) {\n  const {\n    errorBag,\n    meta,\n    values,\n    isSubmitting,\n    isValidating,\n    submitCount\n  } = form;\n  return {\n    'Form state': [{\n      key: 'submitCount',\n      value: submitCount.value\n    }, {\n      key: 'isSubmitting',\n      value: isSubmitting.value\n    }, {\n      key: 'isValidating',\n      value: isValidating.value\n    }, {\n      key: 'touched',\n      value: meta.value.touched\n    }, {\n      key: 'dirty',\n      value: meta.value.dirty\n    }, {\n      key: 'valid',\n      value: meta.value.valid\n    }, {\n      key: 'initialValues',\n      value: meta.value.initialValues\n    }, {\n      key: 'currentValues',\n      value: values\n    }, {\n      key: 'errors',\n      value: keysOf(errorBag.value).reduce((acc, key) => {\n        var _a;\n        const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n        if (message) {\n          acc[key] = message;\n        }\n        return acc;\n      }, {})\n    }]\n  };\n}\n/**\n * Resolves the tag color based on the form state\n */\nfunction getValidityColors(valid) {\n  return {\n    bgColor: valid ? COLORS.success : COLORS.error,\n    textColor: valid ? COLORS.black : COLORS.white\n  };\n}\n\n/**\n * Creates a field composite.\n */\nfunction useField(path, rules, opts) {\n  if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n    return useFieldWithChecked(path, rules, opts);\n  }\n  return _useField(path, rules, opts);\n}\nfunction _useField(path, rules, opts) {\n  const {\n    initialValue: modelValue,\n    validateOnMount,\n    bails,\n    type,\n    checkedValue,\n    label,\n    validateOnValueUpdate,\n    uncheckedValue,\n    controlled,\n    keepValueOnUnmount,\n    syncVModel,\n    form: controlForm\n  } = normalizeOptions(opts);\n  const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\n  const form = controlForm || injectedForm;\n  const name = computed(() => normalizeFormPath(toValue(path)));\n  const validator = computed(() => {\n    const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n    if (schema) {\n      return undefined;\n    }\n    const rulesValue = unref(rules);\n    if (isYupValidator(rulesValue) || isTypedSchema(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\n      return rulesValue;\n    }\n    return normalizeRules(rulesValue);\n  });\n  const {\n    id,\n    value,\n    initialValue,\n    meta,\n    setState,\n    errors,\n    flags\n  } = useFieldState(name, {\n    modelValue,\n    form,\n    bails,\n    label,\n    type,\n    validate: validator.value ? validate$1 : undefined\n  });\n  const errorMessage = computed(() => errors.value[0]);\n  if (syncVModel) {\n    useVModel({\n      value,\n      prop: syncVModel,\n      handleChange\n    });\n  }\n  /**\n   * Handles common onBlur meta update\n   */\n  const handleBlur = function (evt) {\n    let shouldValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    meta.touched = true;\n    if (shouldValidate) {\n      validateWithStateMutation();\n    }\n  };\n  async function validateCurrentValue(mode) {\n    var _a, _b;\n    if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n      return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : {\n        valid: true,\n        errors: []\n      };\n    }\n    if (validator.value) {\n      return validate(value.value, validator.value, {\n        name: unref(name),\n        label: unref(label),\n        values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n        bails\n      });\n    }\n    return {\n      valid: true,\n      errors: []\n    };\n  }\n  const validateWithStateMutation = withLatest(async () => {\n    meta.pending = true;\n    meta.validated = true;\n    return validateCurrentValue('validated-only');\n  }, result => {\n    if (flags.pendingUnmount[field.id]) {\n      return;\n    }\n    setState({\n      errors: result.errors\n    });\n    meta.pending = false;\n    meta.valid = result.valid;\n    return result;\n  });\n  const validateValidStateOnly = withLatest(async () => {\n    return validateCurrentValue('silent');\n  }, result => {\n    meta.valid = result.valid;\n    return result;\n  });\n  function validate$1(opts) {\n    if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n      return validateValidStateOnly();\n    }\n    return validateWithStateMutation();\n  }\n  // Common input/change event handler\n  function handleChange(e) {\n    let shouldValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const newValue = normalizeEventValue(e);\n    setValue(newValue, shouldValidate);\n  }\n  // Runs the initial validation\n  onMounted(() => {\n    if (validateOnMount) {\n      return validateWithStateMutation();\n    }\n    // validate self initially if no form was handling this\n    // forms should have their own initial silent validation run to make things more efficient\n    if (!form || !form.validateSchema) {\n      validateValidStateOnly();\n    }\n  });\n  function setTouched(isTouched) {\n    meta.touched = isTouched;\n  }\n  function resetField(state) {\n    var _a;\n    const newValue = state && 'value' in state ? state.value : initialValue.value;\n    setState({\n      value: klona(newValue),\n      initialValue: klona(newValue),\n      touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n      errors: (state === null || state === void 0 ? void 0 : state.errors) || []\n    });\n    meta.pending = false;\n    meta.validated = false;\n    validateValidStateOnly();\n  }\n  const vm = getCurrentInstance();\n  function setValue(newValue) {\n    let shouldValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    value.value = vm && syncVModel ? applyModelModifiers(newValue, vm.props.modelModifiers) : newValue;\n    const validateFn = shouldValidate ? validateWithStateMutation : validateValidStateOnly;\n    validateFn();\n  }\n  function setErrors(errors) {\n    setState({\n      errors: Array.isArray(errors) ? errors : [errors]\n    });\n  }\n  const valueProxy = computed({\n    get() {\n      return value.value;\n    },\n    set(newValue) {\n      setValue(newValue, validateOnValueUpdate);\n    }\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    watch(valueProxy, (value, oldValue) => {\n      if (!isObject(value)) {\n        return;\n      }\n      if (value === oldValue && isEqual(value, oldValue)) {\n        warn$1('Detected a possible deep change on field `value` ref, for nested changes please either set the entire ref value or use `setValue` or `handleChange`.');\n      }\n    }, {\n      deep: true\n    });\n  }\n  const field = {\n    id,\n    name,\n    label,\n    value: valueProxy,\n    meta,\n    errors,\n    errorMessage,\n    type,\n    checkedValue,\n    uncheckedValue,\n    bails,\n    keepValueOnUnmount,\n    resetField,\n    handleReset: () => resetField(),\n    validate: validate$1,\n    handleChange,\n    handleBlur,\n    setState,\n    setTouched,\n    setErrors,\n    setValue\n  };\n  provide(FieldContextKey, field);\n  if (isRef(rules) && typeof unref(rules) !== 'function') {\n    watch(rules, (value, oldValue) => {\n      if (isEqual(value, oldValue)) {\n        return;\n      }\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }, {\n      deep: true\n    });\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    field._vm = getCurrentInstance();\n    watch(() => Object.assign(Object.assign({\n      errors: errors.value\n    }, meta), {\n      value: value.value\n    }), refreshInspector, {\n      deep: true\n    });\n    if (!form) {\n      registerSingleFieldWithDevtools(field);\n    }\n  }\n  // if no associated form return the field API immediately\n  if (!form) {\n    return field;\n  }\n  // associate the field with the given form\n  // extract cross-field dependencies in a computed prop\n  const dependencies = computed(() => {\n    const rulesVal = validator.value;\n    // is falsy, a function schema or a yup schema\n    if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || isTypedSchema(rulesVal) || Array.isArray(rulesVal)) {\n      return {};\n    }\n    return Object.keys(rulesVal).reduce((acc, rule) => {\n      const deps = extractLocators(rulesVal[rule]).map(dep => dep.__locatorRef).reduce((depAcc, depName) => {\n        const depValue = getFromPath(form.values, depName) || form.values[depName];\n        if (depValue !== undefined) {\n          depAcc[depName] = depValue;\n        }\n        return depAcc;\n      }, {});\n      Object.assign(acc, deps);\n      return acc;\n    }, {});\n  });\n  // Adds a watcher that runs the validation whenever field dependencies change\n  watch(dependencies, (deps, oldDeps) => {\n    // Skip if no dependencies or if the field wasn't manipulated\n    if (!Object.keys(deps).length) {\n      return;\n    }\n    const shouldValidate = !isEqual(deps, oldDeps);\n    if (shouldValidate) {\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }\n  });\n  onBeforeUnmount(() => {\n    var _a;\n    const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(form.keepValuesOnUnmount);\n    const path = toValue(name);\n    if (shouldKeepValue || !form || flags.pendingUnmount[field.id]) {\n      form === null || form === void 0 ? void 0 : form.removePathState(path, id);\n      return;\n    }\n    flags.pendingUnmount[field.id] = true;\n    const pathState = form.getPathState(path);\n    const matchesId = Array.isArray(pathState === null || pathState === void 0 ? void 0 : pathState.id) && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple) ? pathState === null || pathState === void 0 ? void 0 : pathState.id.includes(field.id) : (pathState === null || pathState === void 0 ? void 0 : pathState.id) === field.id;\n    if (!matchesId) {\n      return;\n    }\n    if ((pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && Array.isArray(pathState.value)) {\n      const valueIdx = pathState.value.findIndex(i => isEqual(i, unref(field.checkedValue)));\n      if (valueIdx > -1) {\n        const newVal = [...pathState.value];\n        newVal.splice(valueIdx, 1);\n        form.setFieldValue(path, newVal);\n      }\n      if (Array.isArray(pathState.id)) {\n        pathState.id.splice(pathState.id.indexOf(field.id), 1);\n      }\n    } else {\n      form.unsetPathValue(toValue(name));\n    }\n    form.removePathState(path, id);\n  });\n  return field;\n}\n/**\n * Normalizes partial field options to include the full options\n */\nfunction normalizeOptions(opts) {\n  const defaults = () => ({\n    initialValue: undefined,\n    validateOnMount: false,\n    bails: true,\n    label: undefined,\n    validateOnValueUpdate: true,\n    keepValueOnUnmount: undefined,\n    syncVModel: false,\n    controlled: true\n  });\n  const isVModelSynced = !!(opts === null || opts === void 0 ? void 0 : opts.syncVModel);\n  const modelPropName = typeof (opts === null || opts === void 0 ? void 0 : opts.syncVModel) === 'string' ? opts.syncVModel : (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || 'modelValue';\n  const initialValue = isVModelSynced && !('initialValue' in (opts || {})) ? getCurrentModelValue(getCurrentInstance(), modelPropName) : opts === null || opts === void 0 ? void 0 : opts.initialValue;\n  if (!opts) {\n    return Object.assign(Object.assign({}, defaults()), {\n      initialValue\n    });\n  }\n  // TODO: Deprecate this in next major release\n  const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n  const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\n  const syncVModel = (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || (opts === null || opts === void 0 ? void 0 : opts.syncVModel) || false;\n  return Object.assign(Object.assign(Object.assign({}, defaults()), opts || {}), {\n    initialValue,\n    controlled: controlled !== null && controlled !== void 0 ? controlled : true,\n    checkedValue,\n    syncVModel\n  });\n}\nfunction useFieldWithChecked(name, rules, opts) {\n  const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n  const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n  const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n  function patchCheckedApi(field) {\n    const handleChange = field.handleChange;\n    const checked = computed(() => {\n      const currentValue = unref(field.value);\n      const checkedVal = unref(checkedValue);\n      return Array.isArray(currentValue) ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0 : isEqual(checkedVal, currentValue);\n    });\n    function handleCheckboxChange(e) {\n      let shouldValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var _a, _b;\n      if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n        if (shouldValidate) {\n          field.validate();\n        }\n        return;\n      }\n      const path = toValue(name);\n      const pathState = form === null || form === void 0 ? void 0 : form.getPathState(path);\n      const value = normalizeEventValue(e);\n      let newValue = (_b = unref(checkedValue)) !== null && _b !== void 0 ? _b : value;\n      if (form && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && pathState.type === 'checkbox') {\n        newValue = resolveNextCheckboxValue(getFromPath(form.values, path) || [], newValue, undefined);\n      } else if ((opts === null || opts === void 0 ? void 0 : opts.type) === 'checkbox') {\n        newValue = resolveNextCheckboxValue(unref(field.value), newValue, unref(uncheckedValue));\n      }\n      handleChange(newValue, shouldValidate);\n    }\n    return Object.assign(Object.assign({}, field), {\n      checked,\n      checkedValue,\n      uncheckedValue,\n      handleChange: handleCheckboxChange\n    });\n  }\n  return patchCheckedApi(_useField(name, rules, opts));\n}\nfunction useVModel(_ref3) {\n  let {\n    prop,\n    value,\n    handleChange\n  } = _ref3;\n  const vm = getCurrentInstance();\n  /* istanbul ignore next */\n  if (!vm || !prop) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Failed to setup model events because `useField` was not called in setup.');\n    }\n    return;\n  }\n  const propName = typeof prop === 'string' ? prop : 'modelValue';\n  const emitName = `update:${propName}`;\n  // Component doesn't have a model prop setup (must be defined on the props)\n  if (!(propName in vm.props)) {\n    return;\n  }\n  watch(value, newValue => {\n    if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n      return;\n    }\n    vm.emit(emitName, newValue);\n  });\n  watch(() => getCurrentModelValue(vm, propName), propValue => {\n    if (propValue === IS_ABSENT && value.value === undefined) {\n      return;\n    }\n    const newValue = propValue === IS_ABSENT ? undefined : propValue;\n    if (isEqual(newValue, value.value)) {\n      return;\n    }\n    handleChange(newValue);\n  });\n}\nfunction getCurrentModelValue(vm, propName) {\n  if (!vm) {\n    return undefined;\n  }\n  return vm.props[propName];\n}\nconst FieldImpl = /** #__PURE__ */defineComponent({\n  name: 'Field',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: [String, Object],\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    rules: {\n      type: [Object, String, Function],\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    validateOnBlur: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnChange: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnInput: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnModelUpdate: {\n      type: Boolean,\n      default: undefined\n    },\n    bails: {\n      type: Boolean,\n      default: () => getConfig().bails\n    },\n    label: {\n      type: String,\n      default: undefined\n    },\n    uncheckedValue: {\n      type: null,\n      default: undefined\n    },\n    modelValue: {\n      type: null,\n      default: IS_ABSENT\n    },\n    modelModifiers: {\n      type: null,\n      default: () => ({})\n    },\n    'onUpdate:modelValue': {\n      type: null,\n      default: undefined\n    },\n    standalone: {\n      type: Boolean,\n      default: false\n    },\n    keepValue: {\n      type: Boolean,\n      default: undefined\n    }\n  },\n  setup(props, ctx) {\n    const rules = toRef(props, 'rules');\n    const name = toRef(props, 'name');\n    const label = toRef(props, 'label');\n    const uncheckedValue = toRef(props, 'uncheckedValue');\n    const keepValue = toRef(props, 'keepValue');\n    const {\n      errors,\n      value,\n      errorMessage,\n      validate: validateField,\n      handleChange,\n      handleBlur,\n      setTouched,\n      resetField,\n      handleReset,\n      meta,\n      checked,\n      setErrors\n    } = useField(name, rules, {\n      validateOnMount: props.validateOnMount,\n      bails: props.bails,\n      standalone: props.standalone,\n      type: ctx.attrs.type,\n      initialValue: resolveInitialValue(props, ctx),\n      // Only for checkboxes and radio buttons\n      checkedValue: ctx.attrs.value,\n      uncheckedValue,\n      label,\n      validateOnValueUpdate: false,\n      keepValueOnUnmount: keepValue,\n      syncVModel: true\n    });\n    // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n    const onChangeHandler = function handleChangeWithModel(e) {\n      let shouldValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      handleChange(e, shouldValidate);\n      ctx.emit('update:modelValue', value.value);\n    };\n    const sharedProps = computed(() => {\n      const {\n        validateOnInput,\n        validateOnChange,\n        validateOnBlur,\n        validateOnModelUpdate\n      } = resolveValidationTriggers(props);\n      function baseOnBlur(e) {\n        handleBlur(e, validateOnBlur);\n        if (isCallable(ctx.attrs.onBlur)) {\n          ctx.attrs.onBlur(e);\n        }\n      }\n      function baseOnInput(e) {\n        onChangeHandler(e, validateOnInput);\n        if (isCallable(ctx.attrs.onInput)) {\n          ctx.attrs.onInput(e);\n        }\n      }\n      function baseOnChange(e) {\n        onChangeHandler(e, validateOnChange);\n        if (isCallable(ctx.attrs.onChange)) {\n          ctx.attrs.onChange(e);\n        }\n      }\n      const attrs = {\n        name: props.name,\n        onBlur: baseOnBlur,\n        onInput: baseOnInput,\n        onChange: baseOnChange\n      };\n      attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n      return attrs;\n    });\n    const fieldProps = computed(() => {\n      const attrs = Object.assign({}, sharedProps.value);\n      if (hasCheckedAttr(ctx.attrs.type) && checked) {\n        attrs.checked = checked.value;\n      }\n      const tag = resolveTag(props, ctx);\n      if (shouldHaveValueBinding(tag, ctx.attrs)) {\n        attrs.value = value.value;\n      }\n      return attrs;\n    });\n    const componentProps = computed(() => {\n      return Object.assign(Object.assign({}, sharedProps.value), {\n        modelValue: value.value\n      });\n    });\n    function slotProps() {\n      return {\n        field: fieldProps.value,\n        componentField: componentProps.value,\n        value: value.value,\n        meta,\n        errors: errors.value,\n        errorMessage: errorMessage.value,\n        validate: validateField,\n        resetField,\n        handleChange: onChangeHandler,\n        handleInput: e => onChangeHandler(e, false),\n        handleReset,\n        handleBlur: sharedProps.value.onBlur,\n        setTouched,\n        setErrors\n      };\n    }\n    ctx.expose({\n      setErrors,\n      setTouched,\n      reset: resetField,\n      validate: validateField,\n      handleChange\n    });\n    return () => {\n      const tag = resolveDynamicComponent(resolveTag(props, ctx));\n      const children = normalizeChildren(tag, ctx, slotProps);\n      if (tag) {\n        return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n      }\n      return children;\n    };\n  }\n});\nfunction resolveTag(props, ctx) {\n  let tag = props.as || '';\n  if (!props.as && !ctx.slots.default) {\n    tag = 'input';\n  }\n  return tag;\n}\nfunction resolveValidationTriggers(props) {\n  var _a, _b, _c, _d;\n  const {\n    validateOnInput,\n    validateOnChange,\n    validateOnBlur,\n    validateOnModelUpdate\n  } = getConfig();\n  return {\n    validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n    validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n    validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n    validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate\n  };\n}\nfunction resolveInitialValue(props, ctx) {\n  // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n  // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n  if (!hasCheckedAttr(ctx.attrs.type)) {\n    return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n  }\n  return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\nconst Field = FieldImpl;\nlet FORM_COUNTER = 0;\nconst PRIVATE_PATH_STATE_KEYS = ['bails', 'fieldsCount', 'id', 'multiple', 'type', 'validate'];\nfunction resolveInitialValues(opts) {\n  const providedValues = unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {};\n  const schema = unref(opts === null || opts === void 0 ? void 0 : opts.validationSchema);\n  if (schema && isTypedSchema(schema) && isCallable(schema.cast)) {\n    return klona(schema.cast(providedValues) || {});\n  }\n  return klona(providedValues);\n}\nfunction useForm(opts) {\n  var _a;\n  const formId = FORM_COUNTER++;\n  // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n  let FIELD_ID_COUNTER = 0;\n  // If the form is currently submitting\n  const isSubmitting = ref(false);\n  // If the form is currently validating\n  const isValidating = ref(false);\n  // The number of times the user tried to submit the form\n  const submitCount = ref(0);\n  // field arrays managed by this form\n  const fieldArrays = [];\n  // a private ref for all form values\n  const formValues = reactive(resolveInitialValues(opts));\n  const pathStates = ref([]);\n  const extraErrorsBag = ref({});\n  const pathStateLookup = ref({});\n  const rebuildPathLookup = debounceNextTick(() => {\n    pathStateLookup.value = pathStates.value.reduce((names, state) => {\n      names[normalizeFormPath(toValue(state.path))] = state;\n      return names;\n    }, {});\n  });\n  /**\n   * Manually sets an error message on a specific field\n   */\n  function setFieldError(field, message) {\n    const state = findPathState(field);\n    if (!state) {\n      if (typeof field === 'string') {\n        extraErrorsBag.value[normalizeFormPath(field)] = normalizeErrorItem(message);\n      }\n      return;\n    }\n    // Move the error from the extras path if exists\n    if (typeof field === 'string') {\n      const normalizedPath = normalizeFormPath(field);\n      if (extraErrorsBag.value[normalizedPath]) {\n        delete extraErrorsBag.value[normalizedPath];\n      }\n    }\n    state.errors = normalizeErrorItem(message);\n    state.valid = !state.errors.length;\n  }\n  /**\n   * Sets errors for the fields specified in the object\n   */\n  function setErrors(paths) {\n    keysOf(paths).forEach(path => {\n      setFieldError(path, paths[path]);\n    });\n  }\n  if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n    setErrors(opts.initialErrors);\n  }\n  const errorBag = computed(() => {\n    const pathErrors = pathStates.value.reduce((acc, state) => {\n      if (state.errors.length) {\n        acc[state.path] = state.errors;\n      }\n      return acc;\n    }, {});\n    return Object.assign(Object.assign({}, extraErrorsBag.value), pathErrors);\n  });\n  // Gets the first error of each field\n  const errors = computed(() => {\n    return keysOf(errorBag.value).reduce((acc, key) => {\n      const errors = errorBag.value[key];\n      if (errors === null || errors === void 0 ? void 0 : errors.length) {\n        acc[key] = errors[0];\n      }\n      return acc;\n    }, {});\n  });\n  /**\n   * Holds a computed reference to all fields names and labels\n   */\n  const fieldNames = computed(() => {\n    return pathStates.value.reduce((names, state) => {\n      names[state.path] = {\n        name: state.path || '',\n        label: state.label || ''\n      };\n      return names;\n    }, {});\n  });\n  const fieldBailsMap = computed(() => {\n    return pathStates.value.reduce((map, state) => {\n      var _a;\n      map[state.path] = (_a = state.bails) !== null && _a !== void 0 ? _a : true;\n      return map;\n    }, {});\n  });\n  // mutable non-reactive reference to initial errors\n  // we need this to process initial errors then unset them\n  const initialErrors = Object.assign({}, (opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {});\n  const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\n  // initial form values\n  const {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  } = useFormInitialValues(pathStates, formValues, opts);\n  // form meta aggregations\n  const meta = useFormMeta(pathStates, formValues, originalInitialValues, errors);\n  const controlledValues = computed(() => {\n    return pathStates.value.reduce((acc, state) => {\n      const value = getFromPath(formValues, state.path);\n      setInPath(acc, state.path, value);\n      return acc;\n    }, {});\n  });\n  const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n  function createPathState(path, config) {\n    var _a, _b;\n    const initialValue = computed(() => getFromPath(initialValues.value, toValue(path)));\n    const pathStateExists = pathStateLookup.value[toValue(path)];\n    if (pathStateExists) {\n      if ((config === null || config === void 0 ? void 0 : config.type) === 'checkbox' || (config === null || config === void 0 ? void 0 : config.type) === 'radio') {\n        pathStateExists.multiple = true;\n      }\n      const id = FIELD_ID_COUNTER++;\n      if (Array.isArray(pathStateExists.id)) {\n        pathStateExists.id.push(id);\n      } else {\n        pathStateExists.id = [pathStateExists.id, id];\n      }\n      pathStateExists.fieldsCount++;\n      pathStateExists.__flags.pendingUnmount[id] = false;\n      return pathStateExists;\n    }\n    const currentValue = computed(() => getFromPath(formValues, toValue(path)));\n    const pathValue = toValue(path);\n    const id = FIELD_ID_COUNTER++;\n    const state = reactive({\n      id,\n      path,\n      touched: false,\n      pending: false,\n      valid: true,\n      validated: !!((_a = initialErrors[pathValue]) === null || _a === void 0 ? void 0 : _a.length),\n      initialValue,\n      errors: shallowRef([]),\n      bails: (_b = config === null || config === void 0 ? void 0 : config.bails) !== null && _b !== void 0 ? _b : false,\n      label: config === null || config === void 0 ? void 0 : config.label,\n      type: (config === null || config === void 0 ? void 0 : config.type) || 'default',\n      value: currentValue,\n      multiple: false,\n      __flags: {\n        pendingUnmount: {\n          [id]: false\n        }\n      },\n      fieldsCount: 1,\n      validate: config === null || config === void 0 ? void 0 : config.validate,\n      dirty: computed(() => {\n        return !isEqual(unref(currentValue), unref(initialValue));\n      })\n    });\n    pathStates.value.push(state);\n    pathStateLookup.value[pathValue] = state;\n    rebuildPathLookup();\n    if (errors.value[pathValue] && !initialErrors[pathValue]) {\n      nextTick(() => {\n        validateField(pathValue, {\n          mode: 'silent'\n        });\n      });\n    }\n    // Handles when a path changes\n    if (isRef(path)) {\n      watch(path, newPath => {\n        rebuildPathLookup();\n        const nextValue = klona(currentValue.value);\n        pathStateLookup.value[newPath] = state;\n        nextTick(() => {\n          setInPath(formValues, newPath, nextValue);\n        });\n      });\n    }\n    return state;\n  }\n  /**\n   * Batches validation runs in 5ms batches\n   * Must have two distinct batch queues to make sure they don't override each other settings #3783\n   */\n  const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n  const debouncedValidation = debounceAsync(_validateSchema, 5);\n  const validateSchema = withLatest(async mode => {\n    return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\n  }, (formResult, _ref4) => {\n    let [mode] = _ref4;\n    // fields by id lookup\n    // errors fields names, we need it to also check if custom errors are updated\n    const currentErrorsPaths = keysOf(formCtx.errorBag.value);\n    // collect all the keys from the schema and all fields\n    // this ensures we have a complete key map of all the fields\n    const paths = [...new Set([...keysOf(formResult.results), ...pathStates.value.map(p => p.path), ...currentErrorsPaths])].sort();\n    // aggregates the paths into a single result object while applying the results on the fields\n    return paths.reduce((validation, _path) => {\n      const path = _path;\n      const pathState = findPathState(path) || findHoistedPath(path);\n      const messages = (formResult.results[path] || {\n        errors: []\n      }).errors;\n      const fieldResult = {\n        errors: messages,\n        valid: !messages.length\n      };\n      validation.results[path] = fieldResult;\n      if (!fieldResult.valid) {\n        validation.errors[path] = fieldResult.errors[0];\n      }\n      // clean up extra errors if path state exists\n      if (pathState && extraErrorsBag.value[path]) {\n        delete extraErrorsBag.value[path];\n      }\n      // field not rendered\n      if (!pathState) {\n        setFieldError(path, messages);\n        return validation;\n      }\n      // always update the valid flag regardless of the mode\n      pathState.valid = fieldResult.valid;\n      if (mode === 'silent') {\n        return validation;\n      }\n      if (mode === 'validated-only' && !pathState.validated) {\n        return validation;\n      }\n      setFieldError(pathState, fieldResult.errors);\n      return validation;\n    }, {\n      valid: formResult.valid,\n      results: {},\n      errors: {}\n    });\n  });\n  function mutateAllPathState(mutation) {\n    pathStates.value.forEach(mutation);\n  }\n  function findPathState(path) {\n    const normalizedPath = typeof path === 'string' ? normalizeFormPath(path) : path;\n    const pathState = typeof normalizedPath === 'string' ? pathStateLookup.value[normalizedPath] : normalizedPath;\n    return pathState;\n  }\n  function findHoistedPath(path) {\n    const candidates = pathStates.value.filter(state => path.startsWith(state.path));\n    return candidates.reduce((bestCandidate, candidate) => {\n      if (!bestCandidate) {\n        return candidate;\n      }\n      return candidate.path.length > bestCandidate.path.length ? candidate : bestCandidate;\n    }, undefined);\n  }\n  let UNSET_BATCH = [];\n  let PENDING_UNSET;\n  function unsetPathValue(path) {\n    UNSET_BATCH.push(path);\n    if (!PENDING_UNSET) {\n      PENDING_UNSET = nextTick(() => {\n        const sortedPaths = [...UNSET_BATCH].sort().reverse();\n        sortedPaths.forEach(p => {\n          unsetPath(formValues, p);\n        });\n        UNSET_BATCH = [];\n        PENDING_UNSET = null;\n      });\n    }\n    return PENDING_UNSET;\n  }\n  function makeSubmissionFactory(onlyControlled) {\n    return function submitHandlerFactory(fn, onValidationError) {\n      return function submissionHandler(e) {\n        if (e instanceof Event) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n        // Touch all fields\n        mutateAllPathState(s => s.touched = true);\n        isSubmitting.value = true;\n        submitCount.value++;\n        return validate().then(result => {\n          const values = klona(formValues);\n          if (result.valid && typeof fn === 'function') {\n            const controlled = klona(controlledValues.value);\n            let submittedValues = onlyControlled ? controlled : values;\n            if (result.values) {\n              submittedValues = result.values;\n            }\n            return fn(submittedValues, {\n              evt: e,\n              controlledValues: controlled,\n              setErrors,\n              setFieldError,\n              setTouched,\n              setFieldTouched,\n              setValues,\n              setFieldValue,\n              resetForm,\n              resetField\n            });\n          }\n          if (!result.valid && typeof onValidationError === 'function') {\n            onValidationError({\n              values,\n              evt: e,\n              errors: result.errors,\n              results: result.results\n            });\n          }\n        }).then(returnVal => {\n          isSubmitting.value = false;\n          return returnVal;\n        }, err => {\n          isSubmitting.value = false;\n          // re-throw the err so it doesn't go silent\n          throw err;\n        });\n      };\n    };\n  }\n  const handleSubmitImpl = makeSubmissionFactory(false);\n  const handleSubmit = handleSubmitImpl;\n  handleSubmit.withControlled = makeSubmissionFactory(true);\n  function removePathState(path, id) {\n    const idx = pathStates.value.findIndex(s => s.path === path);\n    const pathState = pathStates.value[idx];\n    if (idx === -1 || !pathState) {\n      return;\n    }\n    nextTick(() => {\n      validateField(path, {\n        mode: 'silent',\n        warn: false\n      });\n    });\n    if (pathState.multiple && pathState.fieldsCount) {\n      pathState.fieldsCount--;\n    }\n    if (Array.isArray(pathState.id)) {\n      const idIndex = pathState.id.indexOf(id);\n      if (idIndex >= 0) {\n        pathState.id.splice(idIndex, 1);\n      }\n      delete pathState.__flags.pendingUnmount[id];\n    }\n    if (!pathState.multiple || pathState.fieldsCount <= 0) {\n      pathStates.value.splice(idx, 1);\n      unsetInitialValue(path);\n      rebuildPathLookup();\n      delete pathStateLookup.value[path];\n    }\n  }\n  function markForUnmount(path) {\n    return mutateAllPathState(s => {\n      if (s.path.startsWith(path)) {\n        keysOf(s.__flags.pendingUnmount).forEach(id => {\n          s.__flags.pendingUnmount[id] = true;\n        });\n      }\n    });\n  }\n  const formCtx = {\n    formId,\n    values: formValues,\n    controlledValues,\n    errorBag,\n    errors,\n    schema,\n    submitCount,\n    meta,\n    isSubmitting,\n    isValidating,\n    fieldArrays,\n    keepValuesOnUnmount,\n    validateSchema: unref(schema) ? validateSchema : undefined,\n    validate,\n    setFieldError,\n    validateField,\n    setFieldValue,\n    setValues,\n    setErrors,\n    setFieldTouched,\n    setTouched,\n    resetForm,\n    resetField,\n    handleSubmit,\n    stageInitialValue,\n    unsetInitialValue,\n    setFieldInitialValue,\n    useFieldModel,\n    createPathState,\n    getPathState: findPathState,\n    unsetPathValue,\n    removePathState,\n    initialValues: initialValues,\n    getAllPathStates: () => pathStates.value,\n    markForUnmount\n  };\n  /**\n   * Sets a single field value\n   */\n  function setFieldValue(field, value) {\n    let shouldValidate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const clonedValue = klona(value);\n    const path = typeof field === 'string' ? field : field.path;\n    const pathState = findPathState(path);\n    if (!pathState) {\n      createPathState(path);\n    }\n    setInPath(formValues, path, clonedValue);\n    if (shouldValidate) {\n      validateField(path);\n    }\n  }\n  /**\n   * Sets multiple fields values\n   */\n  function setValues(fields) {\n    let shouldValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    merge(formValues, fields);\n    // regenerate the arrays when the form values change\n    fieldArrays.forEach(f => f && f.reset());\n    if (shouldValidate) {\n      validate();\n    }\n  }\n  function createModel(path) {\n    const pathState = findPathState(unref(path)) || createPathState(path);\n    return computed({\n      get() {\n        return pathState.value;\n      },\n      set(value) {\n        const pathValue = unref(path);\n        setFieldValue(pathValue, value, false);\n        pathState.validated = true;\n        pathState.pending = true;\n        validateField(pathValue).then(() => {\n          pathState.pending = false;\n        });\n      }\n    });\n  }\n  function useFieldModel(pathOrPaths) {\n    if (!Array.isArray(pathOrPaths)) {\n      return createModel(pathOrPaths);\n    }\n    return pathOrPaths.map(createModel);\n  }\n  /**\n   * Sets the touched meta state on a field\n   */\n  function setFieldTouched(field, isTouched) {\n    const pathState = findPathState(field);\n    if (pathState) {\n      pathState.touched = isTouched;\n    }\n  }\n  /**\n   * Sets the touched meta state on multiple fields\n   */\n  function setTouched(fields) {\n    if (typeof fields === 'boolean') {\n      mutateAllPathState(state => {\n        state.touched = fields;\n      });\n      return;\n    }\n    keysOf(fields).forEach(field => {\n      setFieldTouched(field, !!fields[field]);\n    });\n  }\n  function resetField(field, state) {\n    var _a;\n    const newValue = state && 'value' in state ? state.value : getFromPath(initialValues.value, field);\n    setFieldInitialValue(field, klona(newValue));\n    setFieldValue(field, newValue, false);\n    setFieldTouched(field, (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false);\n    setFieldError(field, (state === null || state === void 0 ? void 0 : state.errors) || []);\n  }\n  /**\n   * Resets all fields\n   */\n  function resetForm(resetState) {\n    let newValues = (resetState === null || resetState === void 0 ? void 0 : resetState.values) ? resetState.values : originalInitialValues.value;\n    newValues = isTypedSchema(schema) && isCallable(schema.cast) ? schema.cast(newValues) : newValues;\n    setInitialValues(newValues);\n    mutateAllPathState(state => {\n      var _a;\n      state.validated = false;\n      state.touched = ((_a = resetState === null || resetState === void 0 ? void 0 : resetState.touched) === null || _a === void 0 ? void 0 : _a[state.path]) || false;\n      setFieldValue(state.path, getFromPath(newValues, state.path), false);\n      setFieldError(state.path, undefined);\n    });\n    setValues(newValues, false);\n    setErrors((resetState === null || resetState === void 0 ? void 0 : resetState.errors) || {});\n    submitCount.value = (resetState === null || resetState === void 0 ? void 0 : resetState.submitCount) || 0;\n    nextTick(() => {\n      validate({\n        mode: 'silent'\n      });\n    });\n  }\n  async function validate(opts) {\n    const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\n    if (mode === 'force') {\n      mutateAllPathState(f => f.validated = true);\n    }\n    if (formCtx.validateSchema) {\n      return formCtx.validateSchema(mode);\n    }\n    isValidating.value = true;\n    // No schema, each field is responsible to validate itself\n    const validations = await Promise.all(pathStates.value.map(state => {\n      if (!state.validate) {\n        return Promise.resolve({\n          key: state.path,\n          valid: true,\n          errors: []\n        });\n      }\n      return state.validate(opts).then(result => {\n        return {\n          key: state.path,\n          valid: result.valid,\n          errors: result.errors\n        };\n      });\n    }));\n    isValidating.value = false;\n    const results = {};\n    const errors = {};\n    for (const validation of validations) {\n      results[validation.key] = {\n        valid: validation.valid,\n        errors: validation.errors\n      };\n      if (validation.errors.length) {\n        errors[validation.key] = validation.errors[0];\n      }\n    }\n    return {\n      valid: validations.every(r => r.valid),\n      results,\n      errors\n    };\n  }\n  async function validateField(path, opts) {\n    var _a;\n    const state = findPathState(path);\n    if (state) {\n      state.validated = true;\n    }\n    if (schema) {\n      const {\n        results\n      } = await validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'validated-only');\n      return results[path] || {\n        errors: [],\n        valid: true\n      };\n    }\n    if (state === null || state === void 0 ? void 0 : state.validate) {\n      return state.validate(opts);\n    }\n    const shouldWarn = !state && ((_a = opts === null || opts === void 0 ? void 0 : opts.warn) !== null && _a !== void 0 ? _a : true);\n    if (shouldWarn) {\n      warn$1(`field with path ${path} was not found`);\n    }\n    return Promise.resolve({\n      errors: [],\n      valid: true\n    });\n  }\n  function unsetInitialValue(path) {\n    unsetPath(initialValues.value, path);\n  }\n  /**\n   * Sneaky function to set initial field values\n   */\n  function stageInitialValue(path, value) {\n    let updateOriginal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    setFieldInitialValue(path, value);\n    setInPath(formValues, path, value);\n    if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n      setInPath(originalInitialValues.value, path, klona(value));\n    }\n  }\n  function setFieldInitialValue(path, value) {\n    setInPath(initialValues.value, path, klona(value));\n  }\n  async function _validateSchema() {\n    const schemaValue = unref(schema);\n    if (!schemaValue) {\n      return {\n        valid: true,\n        results: {},\n        errors: {}\n      };\n    }\n    isValidating.value = true;\n    const formResult = isYupValidator(schemaValue) || isTypedSchema(schemaValue) ? await validateTypedSchema(schemaValue, formValues) : await validateObjectSchema(schemaValue, formValues, {\n      names: fieldNames.value,\n      bailsMap: fieldBailsMap.value\n    });\n    isValidating.value = false;\n    return formResult;\n  }\n  const submitForm = handleSubmit((_, _ref5) => {\n    let {\n      evt\n    } = _ref5;\n    if (isFormSubmitEvent(evt)) {\n      evt.target.submit();\n    }\n  });\n  // Trigger initial validation\n  onMounted(() => {\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n      setErrors(opts.initialErrors);\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n      setTouched(opts.initialTouched);\n    }\n    // if validate on mount was enabled\n    if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n      validate();\n      return;\n    }\n    // otherwise run initial silent validation through schema if available\n    // the useField should skip their own silent validation if a yup schema is present\n    if (formCtx.validateSchema) {\n      formCtx.validateSchema('silent');\n    }\n  });\n  if (isRef(schema)) {\n    watch(schema, () => {\n      var _a;\n      (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n    });\n  }\n  // Provide injections\n  provide(FormContextKey, formCtx);\n  if (process.env.NODE_ENV !== 'production') {\n    registerFormWithDevTools(formCtx);\n    watch(() => Object.assign(Object.assign({\n      errors: errorBag.value\n    }, meta.value), {\n      values: formValues,\n      isSubmitting: isSubmitting.value,\n      isValidating: isValidating.value,\n      submitCount: submitCount.value\n    }), refreshInspector, {\n      deep: true\n    });\n  }\n  function defineComponentBinds(path, config) {\n    const pathState = findPathState(toValue(path)) || createPathState(path);\n    const evalConfig = () => isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {};\n    function onBlur() {\n      var _a;\n      pathState.touched = true;\n      const validateOnBlur = (_a = evalConfig().validateOnBlur) !== null && _a !== void 0 ? _a : getConfig().validateOnBlur;\n      if (validateOnBlur) {\n        validateField(pathState.path);\n      }\n    }\n    function onUpdateModelValue(value) {\n      var _a;\n      const validateOnModelUpdate = (_a = evalConfig().validateOnModelUpdate) !== null && _a !== void 0 ? _a : getConfig().validateOnModelUpdate;\n      setFieldValue(pathState.path, value, validateOnModelUpdate);\n    }\n    const props = computed(() => {\n      if (isCallable(config)) {\n        const configVal = config(pathState);\n        const model = configVal.model || 'modelValue';\n        return Object.assign({\n          onBlur,\n          [model]: pathState.value,\n          [`onUpdate:${model}`]: onUpdateModelValue\n        }, configVal.props || {});\n      }\n      const model = (config === null || config === void 0 ? void 0 : config.model) || 'modelValue';\n      const base = {\n        onBlur,\n        [model]: pathState.value,\n        [`onUpdate:${model}`]: onUpdateModelValue\n      };\n      if (config === null || config === void 0 ? void 0 : config.mapProps) {\n        return Object.assign(Object.assign({}, base), config.mapProps(omit(pathState, PRIVATE_PATH_STATE_KEYS)));\n      }\n      return base;\n    });\n    return props;\n  }\n  function defineInputBinds(path, config) {\n    const pathState = findPathState(toValue(path)) || createPathState(path);\n    const evalConfig = () => isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {};\n    function onBlur() {\n      var _a;\n      pathState.touched = true;\n      const validateOnBlur = (_a = evalConfig().validateOnBlur) !== null && _a !== void 0 ? _a : getConfig().validateOnBlur;\n      if (validateOnBlur) {\n        validateField(pathState.path);\n      }\n    }\n    function onInput(e) {\n      var _a;\n      const value = normalizeEventValue(e);\n      const validateOnInput = (_a = evalConfig().validateOnInput) !== null && _a !== void 0 ? _a : getConfig().validateOnInput;\n      setFieldValue(pathState.path, value, validateOnInput);\n    }\n    function onChange(e) {\n      var _a;\n      const value = normalizeEventValue(e);\n      const validateOnChange = (_a = evalConfig().validateOnChange) !== null && _a !== void 0 ? _a : getConfig().validateOnChange;\n      setFieldValue(pathState.path, value, validateOnChange);\n    }\n    const props = computed(() => {\n      const base = {\n        value: pathState.value,\n        onChange,\n        onInput,\n        onBlur\n      };\n      if (isCallable(config)) {\n        return Object.assign(Object.assign({}, base), config(omit(pathState, PRIVATE_PATH_STATE_KEYS)).attrs || {});\n      }\n      if (config === null || config === void 0 ? void 0 : config.mapAttrs) {\n        return Object.assign(Object.assign({}, base), config.mapAttrs(omit(pathState, PRIVATE_PATH_STATE_KEYS)));\n      }\n      return base;\n    });\n    return props;\n  }\n  return Object.assign(Object.assign({}, formCtx), {\n    values: readonly(formValues),\n    handleReset: () => resetForm(),\n    submitForm,\n    defineComponentBinds,\n    defineInputBinds\n  });\n}\n/**\n * Manages form meta aggregation\n */\nfunction useFormMeta(pathsState, currentValues, initialValues, errors) {\n  const MERGE_STRATEGIES = {\n    touched: 'some',\n    pending: 'some',\n    valid: 'every'\n  };\n  const isDirty = computed(() => {\n    return !isEqual(currentValues, unref(initialValues));\n  });\n  function calculateFlags() {\n    const states = pathsState.value;\n    return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n      const mergeMethod = MERGE_STRATEGIES[flag];\n      acc[flag] = states[mergeMethod](s => s[flag]);\n      return acc;\n    }, {});\n  }\n  const flags = reactive(calculateFlags());\n  watchEffect(() => {\n    const value = calculateFlags();\n    flags.touched = value.touched;\n    flags.valid = value.valid;\n    flags.pending = value.pending;\n  });\n  return computed(() => {\n    return Object.assign(Object.assign({\n      initialValues: unref(initialValues)\n    }, flags), {\n      valid: flags.valid && !keysOf(errors.value).length,\n      dirty: isDirty.value\n    });\n  });\n}\n/**\n * Manages the initial values prop\n */\nfunction useFormInitialValues(pathsState, formValues, opts) {\n  const values = resolveInitialValues(opts);\n  const providedValues = opts === null || opts === void 0 ? void 0 : opts.initialValues;\n  // these are the mutable initial values as the fields are mounted/unmounted\n  const initialValues = ref(values);\n  // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n  // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n  // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n  // so these are the values that the reset function should use\n  // these only change when the user explicitly changes the initial values or when the user resets them with new values.\n  const originalInitialValues = ref(klona(values));\n  function setInitialValues(values) {\n    let updateFields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    initialValues.value = merge(klona(initialValues.value) || {}, klona(values));\n    originalInitialValues.value = merge(klona(originalInitialValues.value) || {}, klona(values));\n    if (!updateFields) {\n      return;\n    }\n    // update the pristine non-touched fields\n    // those are excluded because it's unlikely you want to change the form values using initial values\n    // we mostly watch them for API population or newly inserted fields\n    // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n    pathsState.value.forEach(state => {\n      const wasTouched = state.touched;\n      if (wasTouched) {\n        return;\n      }\n      const newValue = getFromPath(initialValues.value, state.path);\n      setInPath(formValues, state.path, klona(newValue));\n    });\n  }\n  if (isRef(providedValues)) {\n    watch(providedValues, value => {\n      if (value) {\n        setInitialValues(value, true);\n      }\n    }, {\n      deep: true\n    });\n  }\n  return {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  };\n}\nconst FormImpl = /** #__PURE__ */defineComponent({\n  name: 'Form',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: String,\n      default: 'form'\n    },\n    validationSchema: {\n      type: Object,\n      default: undefined\n    },\n    initialValues: {\n      type: Object,\n      default: undefined\n    },\n    initialErrors: {\n      type: Object,\n      default: undefined\n    },\n    initialTouched: {\n      type: Object,\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    onSubmit: {\n      type: Function,\n      default: undefined\n    },\n    onInvalidSubmit: {\n      type: Function,\n      default: undefined\n    },\n    keepValues: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props, ctx) {\n    const initialValues = toRef(props, 'initialValues');\n    const validationSchema = toRef(props, 'validationSchema');\n    const keepValues = toRef(props, 'keepValues');\n    const {\n      errors,\n      errorBag,\n      values,\n      meta,\n      isSubmitting,\n      isValidating,\n      submitCount,\n      controlledValues,\n      validate,\n      validateField,\n      handleReset,\n      resetForm,\n      handleSubmit,\n      setErrors,\n      setFieldError,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetField\n    } = useForm({\n      validationSchema: validationSchema.value ? validationSchema : undefined,\n      initialValues,\n      initialErrors: props.initialErrors,\n      initialTouched: props.initialTouched,\n      validateOnMount: props.validateOnMount,\n      keepValuesOnUnmount: keepValues\n    });\n    const submitForm = handleSubmit((_, _ref6) => {\n      let {\n        evt\n      } = _ref6;\n      if (isFormSubmitEvent(evt)) {\n        evt.target.submit();\n      }\n    }, props.onInvalidSubmit);\n    const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n    function handleFormReset(e) {\n      if (isEvent(e)) {\n        // Prevent default form reset behavior\n        e.preventDefault();\n      }\n      handleReset();\n      if (typeof ctx.attrs.onReset === 'function') {\n        ctx.attrs.onReset();\n      }\n    }\n    function handleScopedSlotSubmit(evt, onSubmit) {\n      const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n      return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n    }\n    function getValues() {\n      return klona(values);\n    }\n    function getMeta() {\n      return klona(meta.value);\n    }\n    function getErrors() {\n      return klona(errors.value);\n    }\n    function slotProps() {\n      return {\n        meta: meta.value,\n        errors: errors.value,\n        errorBag: errorBag.value,\n        values,\n        isSubmitting: isSubmitting.value,\n        isValidating: isValidating.value,\n        submitCount: submitCount.value,\n        controlledValues: controlledValues.value,\n        validate,\n        validateField,\n        handleSubmit: handleScopedSlotSubmit,\n        handleReset,\n        submitForm,\n        setErrors,\n        setFieldError,\n        setFieldValue,\n        setValues,\n        setFieldTouched,\n        setTouched,\n        resetForm,\n        resetField,\n        getValues,\n        getMeta,\n        getErrors\n      };\n    }\n    // expose these functions and methods as part of public API\n    ctx.expose({\n      setFieldError,\n      setErrors,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetForm,\n      validate,\n      validateField,\n      resetField,\n      getValues,\n      getMeta,\n      getErrors\n    });\n    return function renderForm() {\n      // avoid resolving the form component as itself\n      const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n      const children = normalizeChildren(tag, ctx, slotProps);\n      if (!props.as) {\n        return children;\n      }\n      // Attributes to add on a native `form` tag\n      const formAttrs = props.as === 'form' ? {\n        // Disables native validation as vee-validate will handle it.\n        novalidate: true\n      } : {};\n      return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), {\n        onSubmit,\n        onReset: handleFormReset\n      }), children);\n    };\n  }\n});\nconst Form = FormImpl;\nfunction useFieldArray(arrayPath) {\n  const form = injectWithSelf(FormContextKey, undefined);\n  const fields = ref([]);\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  const noOp = () => {};\n  const noOpApi = {\n    fields,\n    remove: noOp,\n    push: noOp,\n    swap: noOp,\n    insert: noOp,\n    update: noOp,\n    replace: noOp,\n    prepend: noOp,\n    move: noOp\n  };\n  if (!form) {\n    warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n    return noOpApi;\n  }\n  if (!unref(arrayPath)) {\n    warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n    return noOpApi;\n  }\n  const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n  if (alreadyExists) {\n    return alreadyExists;\n  }\n  let entryCounter = 0;\n  function getCurrentValues() {\n    return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n  }\n  function initFields() {\n    const currentValues = getCurrentValues();\n    if (!Array.isArray(currentValues)) {\n      return;\n    }\n    fields.value = currentValues.map((v, idx) => createEntry(v, idx, fields.value));\n    updateEntryFlags();\n  }\n  initFields();\n  function updateEntryFlags() {\n    const fieldsLength = fields.value.length;\n    for (let i = 0; i < fieldsLength; i++) {\n      const entry = fields.value[i];\n      entry.isFirst = i === 0;\n      entry.isLast = i === fieldsLength - 1;\n    }\n  }\n  function createEntry(value, idx, currentFields) {\n    // Skips the work by returning the current entry if it already exists\n    // This should make the `key` prop stable and doesn't cause more re-renders than needed\n    // The value is computed and should update anyways\n    if (currentFields && !isNullOrUndefined(idx) && currentFields[idx]) {\n      return currentFields[idx];\n    }\n    const key = entryCounter++;\n    const entry = {\n      key,\n      value: computedDeep({\n        get() {\n          const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n          const idx = fields.value.findIndex(e => e.key === key);\n          return idx === -1 ? value : currentValues[idx];\n        },\n        set(value) {\n          const idx = fields.value.findIndex(e => e.key === key);\n          if (idx === -1) {\n            warn(`Attempting to update a non-existent array item`);\n            return;\n          }\n          update(idx, value);\n        }\n      }),\n      isFirst: false,\n      isLast: false\n    };\n    return entry;\n  }\n  function afterMutation() {\n    updateEntryFlags();\n    // Should trigger a silent validation since a field may not do that #4096\n    form === null || form === void 0 ? void 0 : form.validate({\n      mode: 'silent'\n    });\n  }\n  function remove(idx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!pathValue || !Array.isArray(pathValue)) {\n      return;\n    }\n    const newValue = [...pathValue];\n    newValue.splice(idx, 1);\n    const fieldPath = pathName + `[${idx}]`;\n    form.markForUnmount(fieldPath);\n    form.unsetInitialValue(fieldPath);\n    setInPath(form.values, pathName, newValue);\n    fields.value.splice(idx, 1);\n    afterMutation();\n  }\n  function push(initialValue) {\n    const value = klona(initialValue);\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n    const newValue = [...normalizedPathValue];\n    newValue.push(value);\n    form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    setInPath(form.values, pathName, newValue);\n    fields.value.push(createEntry(value));\n    afterMutation();\n  }\n  function swap(indexA, indexB) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n      return;\n    }\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    // the old switcheroo\n    const temp = newValue[indexA];\n    newValue[indexA] = newValue[indexB];\n    newValue[indexB] = temp;\n    const tempEntry = newFields[indexA];\n    newFields[indexA] = newFields[indexB];\n    newFields[indexB] = tempEntry;\n    setInPath(form.values, pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n  function insert(idx, initialValue) {\n    const value = klona(initialValue);\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || pathValue.length < idx) {\n      return;\n    }\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    newValue.splice(idx, 0, value);\n    newFields.splice(idx, 0, createEntry(value));\n    setInPath(form.values, pathName, newValue);\n    fields.value = newFields;\n    afterMutation();\n  }\n  function replace(arr) {\n    const pathName = unref(arrayPath);\n    form.stageInitialValue(pathName, arr);\n    setInPath(form.values, pathName, arr);\n    initFields();\n    afterMutation();\n  }\n  function update(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n      return;\n    }\n    setInPath(form.values, `${pathName}[${idx}]`, value);\n    form === null || form === void 0 ? void 0 : form.validate({\n      mode: 'validated-only'\n    });\n  }\n  function prepend(initialValue) {\n    const value = klona(initialValue);\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n    const newValue = [value, ...normalizedPathValue];\n    form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    setInPath(form.values, pathName, newValue);\n    fields.value.unshift(createEntry(value));\n    afterMutation();\n  }\n  function move(oldIdx, newIdx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n    if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n      return;\n    }\n    const newFields = [...fields.value];\n    const movedItem = newFields[oldIdx];\n    newFields.splice(oldIdx, 1);\n    newFields.splice(newIdx, 0, movedItem);\n    const movedValue = newValue[oldIdx];\n    newValue.splice(oldIdx, 1);\n    newValue.splice(newIdx, 0, movedValue);\n    setInPath(form.values, pathName, newValue);\n    fields.value = newFields;\n    afterMutation();\n  }\n  const fieldArrayCtx = {\n    fields,\n    remove,\n    push,\n    swap,\n    insert,\n    update,\n    replace,\n    prepend,\n    move\n  };\n  form.fieldArrays.push(Object.assign({\n    path: arrayPath,\n    reset: initFields\n  }, fieldArrayCtx));\n  onBeforeUnmount(() => {\n    const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n    if (idx >= 0) {\n      form.fieldArrays.splice(idx, 1);\n    }\n  });\n  // Makes sure to sync the form values with the array value if they go out of sync\n  // #4153\n  watch(getCurrentValues, formValues => {\n    const fieldsValues = fields.value.map(f => f.value);\n    // If form values are not the same as the current values then something overrode them.\n    if (!isEqual(formValues, fieldsValues)) {\n      initFields();\n    }\n  });\n  return fieldArrayCtx;\n}\nconst FieldArrayImpl = /** #__PURE__ */defineComponent({\n  name: 'FieldArray',\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props, ctx) {\n    const {\n      push,\n      remove,\n      swap,\n      insert,\n      replace,\n      update,\n      prepend,\n      move,\n      fields\n    } = useFieldArray(toRef(props, 'name'));\n    function slotProps() {\n      return {\n        fields: fields.value,\n        push,\n        remove,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move\n      };\n    }\n    ctx.expose({\n      push,\n      remove,\n      swap,\n      insert,\n      update,\n      replace,\n      prepend,\n      move\n    });\n    return () => {\n      const children = normalizeChildren(undefined, ctx, slotProps);\n      return children;\n    };\n  }\n});\nconst FieldArray = FieldArrayImpl;\nconst ErrorMessageImpl = /** #__PURE__ */defineComponent({\n  name: 'ErrorMessage',\n  props: {\n    as: {\n      type: String,\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props, ctx) {\n    const form = inject(FormContextKey, undefined);\n    const message = computed(() => {\n      return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n    });\n    function slotProps() {\n      return {\n        message: message.value\n      };\n    }\n    return () => {\n      // Renders nothing if there are no messages\n      if (!message.value) {\n        return undefined;\n      }\n      const tag = props.as ? resolveDynamicComponent(props.as) : props.as;\n      const children = normalizeChildren(tag, ctx, slotProps);\n      const attrs = Object.assign({\n        role: 'alert'\n      }, ctx.attrs);\n      // If no tag was specified and there are children\n      // render the slot as is without wrapping it\n      if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n        return children;\n      }\n      // If no children in slot\n      // render whatever specified and fallback to a <span> with the message in it's contents\n      if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n        return h(tag || 'span', attrs, message.value);\n      }\n      return h(tag, attrs, children);\n    };\n  }\n});\nconst ErrorMessage = ErrorMessageImpl;\nfunction useResetForm() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return function resetForm(state) {\n    if (!form) {\n      return;\n    }\n    return form.resetForm(state);\n  };\n}\n\n/**\n * If a field is dirty or not\n */\nfunction useIsFieldDirty(path) {\n  const fieldOrPath = resolveFieldOrPathState(path);\n  return computed(() => {\n    var _a, _b;\n    if (!fieldOrPath) {\n      return false;\n    }\n    return (_b = 'meta' in fieldOrPath ? fieldOrPath.meta.dirty : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.dirty) !== null && _b !== void 0 ? _b : false;\n  });\n}\n\n/**\n * If a field is touched or not\n */\nfunction useIsFieldTouched(path) {\n  const fieldOrPath = resolveFieldOrPathState(path);\n  return computed(() => {\n    var _a, _b;\n    if (!fieldOrPath) {\n      return false;\n    }\n    return (_b = 'meta' in fieldOrPath ? fieldOrPath.meta.touched : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.touched) !== null && _b !== void 0 ? _b : false;\n  });\n}\n\n/**\n * If a field is validated and is valid\n */\nfunction useIsFieldValid(path) {\n  const fieldOrPath = resolveFieldOrPathState(path);\n  return computed(() => {\n    var _a, _b;\n    if (!fieldOrPath) {\n      return false;\n    }\n    return (_b = 'meta' in fieldOrPath ? fieldOrPath.meta.valid : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.valid) !== null && _b !== void 0 ? _b : false;\n  });\n}\n\n/**\n * If the form is submitting or not\n */\nfunction useIsSubmitting() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * If the form is validating or not\n */\nfunction useIsValidating() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.isValidating.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * Validates a single field\n */\nfunction useValidateField(path) {\n  const form = injectWithSelf(FormContextKey);\n  const field = path ? undefined : inject(FieldContextKey);\n  return function validateField() {\n    if (field) {\n      return field.validate();\n    }\n    if (form && path) {\n      return form === null || form === void 0 ? void 0 : form.validateField(unref(path));\n    }\n    warn(`field with name ${unref(path)} was not found`);\n    return Promise.resolve({\n      errors: [],\n      valid: true\n    });\n  };\n}\n\n/**\n * If the form is dirty or not\n */\nfunction useIsFormDirty() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * If the form is touched or not\n */\nfunction useIsFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * If the form has been validated and is valid\n */\nfunction useIsFormValid() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * Validate multiple fields\n */\nfunction useValidateForm() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return function validateField() {\n    if (!form) {\n      return Promise.resolve({\n        results: {},\n        errors: {},\n        valid: true\n      });\n    }\n    return form.validate();\n  };\n}\n\n/**\n * The number of form's submission count\n */\nfunction useSubmitCount() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n  });\n}\n\n/**\n * Gives access to a field's current value\n */\nfunction useFieldValue(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n    }\n    return unref(field === null || field === void 0 ? void 0 : field.value);\n  });\n}\n\n/**\n * Gives access to a form's values\n */\nfunction useFormValues() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.values) || {};\n  });\n}\n\n/**\n * Gives access to all form errors\n */\nfunction useFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.errors.value) || {};\n  });\n}\n\n/**\n * Gives access to a single field error\n */\nfunction useFieldError(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n    }\n    return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n  });\n}\nfunction useSubmitForm(cb) {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  const onSubmit = form ? form.handleSubmit(cb) : undefined;\n  return function submitForm(e) {\n    if (!onSubmit) {\n      return;\n    }\n    return onSubmit(e);\n  };\n}\n\n/**\n * Sets a field's error message\n */\nfunction useSetFieldError(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return function setFieldError(message) {\n    if (path && form) {\n      form.setFieldError(toValue(path), message);\n    }\n    if (field) {\n      field.setErrors(message || []);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set error for unknown field with path \"${toValue(path)}\"`);\n    }\n  };\n}\n\n/**\n * Sets a field's touched meta state\n */\nfunction useSetFieldTouched(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return function setFieldTouched(touched) {\n    if (path && form) {\n      form.setFieldTouched(toValue(path), touched);\n    }\n    if (field) {\n      field.setTouched(touched);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set touched meta for unknown field with path \"${toValue(path)}\"`);\n    }\n  };\n}\n\n/**\n * Sets a field's value\n */\nfunction useSetFieldValue(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return function setFieldValue(value) {\n    let shouldValidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (path && form) {\n      form.setFieldValue(toValue(path), value, shouldValidate);\n    }\n    if (field) {\n      field.setValue(value, shouldValidate);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set value for unknown field with path \"${toValue(path)}\"`);\n    }\n  };\n}\n\n/**\n * Sets multiple fields errors\n */\nfunction useSetFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n  function setFormErrors(fields) {\n    if (form) {\n      form.setErrors(fields);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set errors because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n    }\n  }\n  return setFormErrors;\n}\n\n/**\n * Sets multiple fields touched or all fields in the form\n */\nfunction useSetFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n  function setFormTouched(fields) {\n    if (form) {\n      form.setTouched(fields);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set touched state because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n    }\n  }\n  return setFormTouched;\n}\n\n/**\n * Sets multiple fields values\n */\nfunction useSetFormValues() {\n  const form = injectWithSelf(FormContextKey);\n  function setFormValues(fields) {\n    if (form) {\n      form.setValues(fields);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Could not set form values because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n    }\n  }\n  return setFormValues;\n}\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, normalizeRules, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useIsValidating, useResetForm, useSetFieldError, useSetFieldTouched, useSetFieldValue, useSetFormErrors, useSetFormTouched, useSetFormValues, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate, validateObjectSchema as validateObject };","map":{"version":3,"names":["getCurrentInstance","inject","warn","warn$1","computed","unref","ref","watch","nextTick","isRef","reactive","onUnmounted","toValue","onMounted","provide","onBeforeUnmount","defineComponent","toRef","resolveDynamicComponent","h","readonly","watchEffect","shallowRef","setupDevtoolsPlugin","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","isObjectLike","getTag","Object","prototype","toString","call","isPlainObject","getPrototypeOf","proto","merge","target","source","keys","forEach","key","normalizeFormPath","path","pathArr","split","length","fullPath","String","i","RULES","defineRule","id","validator","guardExtend","resolveRule","Error","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isClient","window","isLocator","__locatorRef","isTypedSchema","parse","__type","isYupValidator","validate","hasCheckedAttr","type","isContainerValue","isEmptyContainer","isNotNestedPath","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","tag","attrs","hasTruthyBindingValue","includes","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","Event","srcElement","isPropPresent","prop","isEqual","a","b","constructor","Map","size","entries","has","get","isFile","name","lastModified","Set","ArrayBuffer","isView","RegExp","flags","valueOf","File","set","val","klona","enumerable","configurable","writable","defineProperty","x","k","list","tmp","str","create","__proto__","add","Date","buffer","slice","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","hasOwnProperty","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","filter","Boolean","reduce","acc","propKey","setInPath","unset","splice","unsetPath","pathValues","map","_","idx","join","keysOf","record","injectWithSelf","symbol","def","arguments","vm","provides","message","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","findIndex","v","push","throttle","func","limit","inThrottle","lastResult","context","setTimeout","_len","args","_key","apply","debounceAsync","inner","ms","timer","resolves","_len2","_key2","clearTimeout","result","r","Promise","resolve","applyModelModifiers","modifiers","number","withLatest","onDone","latestRun","runLatest","_len3","_key3","pending","computedDeep","_ref","baseRef","newValue","deep","normalizeErrorItem","resolveFieldOrPathState","form","state","getPathState","field","omit","debounceNextTick","lastTick","_len4","_key4","thisTick","normalizeChildren","slotProps","slots","default","_a","_b","getBoundValue","hasValueBinding","_value","parseInputValue","valueAsNumber","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","provided","mapValueToLocator","createLocator","locator","crossTable","extractLocators","DEFAULT_CONFIG","generateMessage","_ref2","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","setConfig","newConf","configure","shouldBail","label","formData","values","_validate","errors","valid","validateFieldWithTypedSchema","ctx","pipeline","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","isYupError","err","yupToTypedSchema","yupSchema","schema","output","abortEarly","typedSchema","messages","fillTargetValues","fieldCtx","normalize","param","validateTypedSchema","validationResult","results","m","validateObjectSchema","opts","paths","validations","_c","strings","names","fieldResult","bailsMap","isAllValid","validationResults","all","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","setErrors","createFieldErrors","MAX_SAFE_INTEGER","meta","createFieldMeta","setState","touched","pendingUnmount","createPathState","setFieldError","setFieldTouched","__flags","modelRef","resolveInitialValue","initialValues","stageInitialValue","resolveModelValue","setFieldValue","validated","dirty","immediate","flush","installDevtoolsPlugin","app","process","env","NODE_ENV","packageName","homepage","logo","setupApiHooks","DEVTOOLS_FORMS","DEVTOOLS_FIELDS","API","refreshInspector","sendInspectorState","INSPECTOR_ID","sendInspectorTree","registerFormWithDevTools","appContext","formId","_vm","registerSingleFieldWithDevtools","COLORS","success","unknown","white","black","blue","purple","orange","gray","SELECTED_NODE","api","addInspector","icon","noSelectionText","actions","tooltip","action","console","validateField","resetField","resetForm","on","getInspectorTree","payload","inspectorId","forms","fields","rootNodes","mapFormForDevtoolsInspector","mapFieldForDevtoolsInspector","getInspectorState","currentTab","decodeNodeId","nodeId","buildFormState","buildFieldState","textColor","bgColor","getValidityColors","formTreeNodes","getAllPathStates","mapPathForDevtoolsInspector","buildFormTree","tree","pop","children","c","encodeNodeId","tags","backgroundColor","getFieldNodeTags","fieldsCount","stateOrField","fieldPath","idObject","f","ff","btoa","encodeURIComponent","JSON","stringify","decodeURIComponent","atob","errorBag","isSubmitting","isValidating","submitCount","useField","useFieldWithChecked","_useField","validateOnMount","validateOnValueUpdate","controlled","keepValueOnUnmount","syncVModel","controlForm","normalizeOptions","injectedForm","rulesValue","validate$1","errorMessage","useVModel","handleChange","handleBlur","shouldValidate","validateWithStateMutation","validateCurrentValue","mode","validateSchema","validateValidStateOnly","e","setValue","setTouched","isTouched","props","modelModifiers","validateFn","valueProxy","oldValue","handleReset","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","shouldKeepValue","keepValuesOnUnmount","removePathState","pathState","matchesId","valueIdx","indexOf","unsetPathValue","defaults","isVModelSynced","modelPropName","getCurrentModelValue","valueProp","standalone","patchCheckedApi","checked","checkedVal","handleCheckboxChange","_ref3","propName","emitName","emit","propValue","FieldImpl","inheritAttrs","as","required","Function","keepValue","setup","onChangeHandler","handleChangeWithModel","sharedProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","fieldProps","resolveTag","componentProps","componentField","handleInput","expose","reset","_d","Field","FORM_COUNTER","PRIVATE_PATH_STATE_KEYS","resolveInitialValues","providedValues","validationSchema","cast","useForm","FIELD_ID_COUNTER","fieldArrays","formValues","pathStates","extraErrorsBag","pathStateLookup","rebuildPathLookup","findPathState","normalizedPath","initialErrors","pathErrors","fieldNames","fieldBailsMap","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","controlledValues","config","pathStateExists","pathValue","newPath","nextValue","debouncedSilentValidation","_validateSchema","debouncedValidation","formResult","_ref4","currentErrorsPaths","formCtx","p","sort","validation","_path","findHoistedPath","mutateAllPathState","mutation","candidates","startsWith","bestCandidate","candidate","UNSET_BATCH","PENDING_UNSET","sortedPaths","reverse","makeSubmissionFactory","onlyControlled","submitHandlerFactory","onValidationError","submissionHandler","preventDefault","stopPropagation","s","then","submittedValues","setValues","returnVal","handleSubmitImpl","handleSubmit","withControlled","idIndex","unsetInitialValue","markForUnmount","setFieldInitialValue","useFieldModel","clonedValue","createModel","pathOrPaths","resetState","newValues","every","shouldWarn","updateOriginal","schemaValue","submitForm","_ref5","submit","initialTouched","defineComponentBinds","evalConfig","onUpdateModelValue","configVal","model","base","mapProps","defineInputBinds","mapAttrs","pathsState","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","states","flag","mergeMethod","updateFields","wasTouched","FormImpl","onSubmit","onInvalidSubmit","keepValues","_ref6","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","getValues","getMeta","getErrors","renderForm","formAttrs","novalidate","Form","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","move","alreadyExists","entryCounter","getCurrentValues","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","currentFields","afterMutation","pathName","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","oldIdx","newIdx","movedItem","movedValue","fieldArrayCtx","fieldsValues","FieldArrayImpl","FieldArray","ErrorMessageImpl","role","ErrorMessage","useResetForm","useIsFieldDirty","fieldOrPath","useIsFieldTouched","useIsFieldValid","useIsSubmitting","useIsValidating","useValidateField","useIsFormDirty","useIsFormTouched","useIsFormValid","useValidateForm","useSubmitCount","useFieldValue","useFormValues","useFormErrors","useFieldError","useSubmitForm","cb","useSetFieldError","useSetFieldTouched","useSetFieldValue","useSetFormErrors","setFormErrors","useSetFormTouched","setFormTouched","useSetFormValues","setFormValues","validateObject"],"sources":["/Users/linhcao/node_modules/vee-validate/dist/vee-validate.esm.js"],"sourcesContent":["/**\n  * vee-validate v4.11.1\n  * (c) 2023 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, computed, unref, ref, watch, nextTick, isRef, reactive, onUnmounted, toValue, onMounted, provide, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, readonly, watchEffect, shallowRef } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\n    return typeof fn === 'function';\n}\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n    return Number(value) >= 0;\n}\nfunction toNumber(value) {\n    const n = parseFloat(value);\n    return isNaN(n) ? value : n;\n}\nfunction isObjectLike(value) {\n    return typeof value === 'object' && value !== null;\n}\nfunction getTag(value) {\n    if (value == null) {\n        return value === undefined ? '[object Undefined]' : '[object Null]';\n    }\n    return Object.prototype.toString.call(value);\n}\n// Reference: https://github.com/lodash/lodash/blob/master/isPlainObject.js\nfunction isPlainObject(value) {\n    if (!isObjectLike(value) || getTag(value) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(value) === null) {\n        return true;\n    }\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n}\nfunction merge(target, source) {\n    Object.keys(source).forEach(key => {\n        if (isPlainObject(source[key])) {\n            if (!target[key]) {\n                target[key] = {};\n            }\n            merge(target[key], source[key]);\n            return;\n        }\n        target[key] = source[key];\n    });\n    return target;\n}\n/**\n * Constructs a path with dot paths for arrays to use brackets to be compatible with vee-validate path syntax\n */\nfunction normalizeFormPath(path) {\n    const pathArr = path.split('.');\n    if (!pathArr.length) {\n        return '';\n    }\n    let fullPath = String(pathArr[0]);\n    for (let i = 1; i < pathArr.length; i++) {\n        if (isIndex(pathArr[i])) {\n            fullPath += `[${pathArr[i]}]`;\n            continue;\n        }\n        fullPath += `.${pathArr[i]}`;\n    }\n    return fullPath;\n}\n\nconst RULES = {};\n/**\n * Adds a custom validator to the list of validation rules.\n */\nfunction defineRule(id, validator) {\n    // makes sure new rules are properly formatted.\n    guardExtend(id, validator);\n    RULES[id] = validator;\n}\n/**\n * Gets an already defined rule\n */\nfunction resolveRule(id) {\n    return RULES[id];\n}\n/**\n * Guards from extension violations.\n */\nfunction guardExtend(id, validator) {\n    if (isCallable(validator)) {\n        return;\n    }\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\n\nconst isClient = typeof window !== 'undefined';\nfunction isLocator(value) {\n    return isCallable(value) && !!value.__locatorRef;\n}\nfunction isTypedSchema(value) {\n    return !!value && isCallable(value.parse) && value.__type === 'VVTypedSchema';\n}\nfunction isYupValidator(value) {\n    return !!value && isCallable(value.validate);\n}\nfunction hasCheckedAttr(type) {\n    return type === 'checkbox' || type === 'radio';\n}\nfunction isContainerValue(value) {\n    return isObject(value) || Array.isArray(value);\n}\n/**\n * True if the value is an empty object or array\n */\nfunction isEmptyContainer(value) {\n    if (Array.isArray(value)) {\n        return value.length === 0;\n    }\n    return isObject(value) && Object.keys(value).length === 0;\n}\n/**\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\n */\nfunction isNotNestedPath(path) {\n    return /^\\[.+\\]$/i.test(path);\n}\n/**\n * Checks if an element is a native HTML5 multi-select input element\n */\nfunction isNativeMultiSelect(el) {\n    return isNativeSelect(el) && el.multiple;\n}\n/**\n * Checks if an element is a native HTML5 select input element\n */\nfunction isNativeSelect(el) {\n    return el.tagName === 'SELECT';\n}\n/**\n * Checks if a tag name with attrs object will render a native multi-select element\n */\nfunction isNativeMultiSelectNode(tag, attrs) {\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\n * Checks if a node should have a `:value` binding or not\n *\n * These nodes should not have a value binding\n * For files, because they are not reactive\n * For multi-selects because the value binding will reset the value\n */\nfunction shouldHaveValueBinding(tag, attrs) {\n    return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\nfunction isFormSubmitEvent(evt) {\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\nfunction isEvent(evt) {\n    if (!evt) {\n        return false;\n    }\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n        return true;\n    }\n    // this is for IE and Cypress #3161\n    /* istanbul ignore next */\n    if (evt && evt.srcElement) {\n        return true;\n    }\n    return false;\n}\nfunction isPropPresent(obj, prop) {\n    return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\n * Compares if two values are the same borrowed from:\n * https://github.com/epoberezkin/fast-deep-equal\n * We added a case for file matching since `Object.keys` doesn't work with Files.\n * */\nfunction isEqual(a, b) {\n    if (a === b)\n        return true;\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\n        if (a.constructor !== b.constructor)\n            return false;\n        // eslint-disable-next-line no-var\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (!isEqual(a[i], b[i]))\n                    return false;\n            return true;\n        }\n        if (a instanceof Map && b instanceof Map) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            for (i of a.entries())\n                if (!isEqual(i[1], b.get(i[0])))\n                    return false;\n            return true;\n        }\n        // We added this part for file comparison, arguably a little naive but should work for most cases.\n        // #3911\n        if (isFile(a) && isFile(b)) {\n            if (a.size !== b.size)\n                return false;\n            if (a.name !== b.name)\n                return false;\n            if (a.lastModified !== b.lastModified)\n                return false;\n            if (a.type !== b.type)\n                return false;\n            return true;\n        }\n        if (a instanceof Set && b instanceof Set) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            return true;\n        }\n        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (a[i] !== b[i])\n                    return false;\n            return true;\n        }\n        if (a.constructor === RegExp)\n            return a.source === b.source && a.flags === b.flags;\n        if (a.valueOf !== Object.prototype.valueOf)\n            return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString)\n            return a.toString() === b.toString();\n        keys = Object.keys(a);\n        length = keys.length;\n        for (i = length; i-- !== 0;) {\n            // eslint-disable-next-line no-var\n            var key = keys[i];\n            if (!isEqual(a[key], b[key]))\n                return false;\n        }\n        return true;\n    }\n    // true if both NaN, false otherwise\n    // eslint-disable-next-line no-self-compare\n    return a !== a && b !== b;\n}\nfunction isFile(a) {\n    if (!isClient) {\n        return false;\n    }\n    return a instanceof File;\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nfunction cleanupNonNestedPath(path) {\n    if (isNotNestedPath(path)) {\n        return path.replace(/\\[|\\]/gi, '');\n    }\n    return path;\n}\nfunction getFromPath(object, path, fallback) {\n    if (!object) {\n        return fallback;\n    }\n    if (isNotNestedPath(path)) {\n        return object[cleanupNonNestedPath(path)];\n    }\n    const resolvedValue = (path || '')\n        .split(/\\.|\\[(\\d+)\\]/)\n        .filter(Boolean)\n        .reduce((acc, propKey) => {\n        if (isContainerValue(acc) && propKey in acc) {\n            return acc[propKey];\n        }\n        return fallback;\n    }, object);\n    return resolvedValue;\n}\n/**\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\n */\nfunction setInPath(object, path, value) {\n    if (isNotNestedPath(path)) {\n        object[cleanupNonNestedPath(path)] = value;\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, set it\n        if (i === keys.length - 1) {\n            acc[keys[i]] = value;\n            return;\n        }\n        // Key does not exist, create a container for it\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            // container can be either an object or an array depending on the next key if it exists\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n        }\n        acc = acc[keys[i]];\n    }\n}\nfunction unset(object, key) {\n    if (Array.isArray(object) && isIndex(key)) {\n        object.splice(Number(key), 1);\n        return;\n    }\n    if (isObject(object)) {\n        delete object[key];\n    }\n}\n/**\n * Removes a nested property from object\n */\nfunction unsetPath(object, path) {\n    if (isNotNestedPath(path)) {\n        delete object[cleanupNonNestedPath(path)];\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, unset it\n        if (i === keys.length - 1) {\n            unset(acc, keys[i]);\n            break;\n        }\n        // Key does not exist, exit\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            break;\n        }\n        acc = acc[keys[i]];\n    }\n    const pathValues = keys.map((_, idx) => {\n        return getFromPath(object, keys.slice(0, idx).join('.'));\n    });\n    for (let i = pathValues.length - 1; i >= 0; i--) {\n        if (!isEmptyContainer(pathValues[i])) {\n            continue;\n        }\n        if (i === 0) {\n            unset(object, keys[0]);\n            continue;\n        }\n        unset(pathValues[i - 1], keys[i - 1]);\n    }\n}\n/**\n * A typed version of Object.keys\n */\nfunction keysOf(record) {\n    return Object.keys(record);\n}\n// Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\nfunction injectWithSelf(symbol, def = undefined) {\n    const vm = getCurrentInstance();\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\nfunction warn(message) {\n    warn$1(`[vee-validate]: ${message}`);\n}\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n    if (Array.isArray(currentValue)) {\n        const newVal = [...currentValue];\n        // Use isEqual since checked object values can possibly fail the equality check #3883\n        const idx = newVal.findIndex(v => isEqual(v, checkedValue));\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n        return newVal;\n    }\n    return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\n * (`limit`)\n */\nfunction throttle(func, limit) {\n    let inThrottle;\n    let lastResult;\n    return function (...args) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const context = this;\n        if (!inThrottle) {\n            inThrottle = true;\n            setTimeout(() => (inThrottle = false), limit);\n            lastResult = func.apply(context, args);\n        }\n        return lastResult;\n    };\n}\nfunction debounceAsync(inner, ms = 0) {\n    let timer = null;\n    let resolves = [];\n    return function (...args) {\n        // Run the function after a certain amount of time\n        if (timer) {\n            clearTimeout(timer);\n        }\n        // @ts-expect-error timer is a number\n        timer = setTimeout(() => {\n            // Get the result of the inner function, then apply it to the resolve function of\n            // each promise that has been created since the last time the inner function was run\n            const result = inner(...args);\n            resolves.forEach(r => r(result));\n            resolves = [];\n        }, ms);\n        return new Promise(resolve => resolves.push(resolve));\n    };\n}\nfunction applyModelModifiers(value, modifiers) {\n    if (!isObject(modifiers)) {\n        return value;\n    }\n    if (modifiers.number) {\n        return toNumber(value);\n    }\n    return value;\n}\nfunction withLatest(fn, onDone) {\n    let latestRun;\n    return async function runLatest(...args) {\n        const pending = fn(...args);\n        latestRun = pending;\n        const result = await pending;\n        if (pending !== latestRun) {\n            return result;\n        }\n        latestRun = undefined;\n        onDone(result, args);\n        return result;\n    };\n}\nfunction computedDeep({ get, set }) {\n    const baseRef = ref(klona(get()));\n    watch(get, newValue => {\n        if (isEqual(newValue, baseRef.value)) {\n            return;\n        }\n        baseRef.value = klona(newValue);\n    }, {\n        deep: true,\n    });\n    watch(baseRef, newValue => {\n        if (isEqual(newValue, get())) {\n            return;\n        }\n        set(klona(newValue));\n    }, {\n        deep: true,\n    });\n    return baseRef;\n}\nfunction normalizeErrorItem(message) {\n    return Array.isArray(message) ? message : message ? [message] : [];\n}\nfunction resolveFieldOrPathState(path) {\n    const form = injectWithSelf(FormContextKey);\n    const state = path ? computed(() => form === null || form === void 0 ? void 0 : form.getPathState(unref(path))) : undefined;\n    const field = path ? undefined : inject(FieldContextKey);\n    if (!field && !(state === null || state === void 0 ? void 0 : state.value)) {\n        warn(`field with name ${unref(path)} was not found`);\n    }\n    return state || field;\n}\nfunction omit(obj, keys) {\n    const target = {};\n    for (const key in obj) {\n        if (!keys.includes(key)) {\n            target[key] = obj[key];\n        }\n    }\n    return target;\n}\nfunction debounceNextTick(inner) {\n    let lastTick = null;\n    let resolves = [];\n    return function (...args) {\n        // Run the function after a certain amount of time\n        const thisTick = nextTick(() => {\n            if (lastTick !== thisTick) {\n                return;\n            }\n            // Get the result of the inner function, then apply it to the resolve function of\n            // each promise that has been created since the last time the inner function was run\n            const result = inner(...args);\n            resolves.forEach(r => r(result));\n            resolves = [];\n            lastTick = null;\n        });\n        lastTick = thisTick;\n        return new Promise(resolve => resolves.push(resolve));\n    };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst normalizeChildren = (tag, context, slotProps) => {\n    if (!context.slots.default) {\n        return context.slots.default;\n    }\n    if (typeof tag === 'string' || !tag) {\n        return context.slots.default(slotProps());\n    }\n    return {\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\n    };\n};\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction getBoundValue(el) {\n    if (hasValueBinding(el)) {\n        return el._value;\n    }\n    return undefined;\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction hasValueBinding(el) {\n    return '_value' in el;\n}\n\nfunction parseInputValue(el) {\n    if (el.type === 'number') {\n        return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n    }\n    if (el.type === 'range') {\n        return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n    }\n    return el.value;\n}\nfunction normalizeEventValue(value) {\n    if (!isEvent(value)) {\n        return value;\n    }\n    const input = value.target;\n    // Vue sets the current bound value on `_value` prop\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n        return getBoundValue(input);\n    }\n    if (input.type === 'file' && input.files) {\n        const files = Array.from(input.files);\n        return input.multiple ? files : files[0];\n    }\n    if (isNativeMultiSelect(input)) {\n        return Array.from(input.options)\n            .filter(opt => opt.selected && !opt.disabled)\n            .map(getBoundValue);\n    }\n    // makes sure we get the actual `option` bound value\n    // #3440\n    if (isNativeSelect(input)) {\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\n    }\n    return parseInputValue(input);\n}\n\n/**\n * Normalizes the given rules expression.\n */\nfunction normalizeRules(rules) {\n    const acc = {};\n    Object.defineProperty(acc, '_$$isNormalized', {\n        value: true,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n    });\n    if (!rules) {\n        return acc;\n    }\n    // Object is already normalized, skip.\n    if (isObject(rules) && rules._$$isNormalized) {\n        return rules;\n    }\n    if (isObject(rules)) {\n        return Object.keys(rules).reduce((prev, curr) => {\n            const params = normalizeParams(rules[curr]);\n            if (rules[curr] !== false) {\n                prev[curr] = buildParams(params);\n            }\n            return prev;\n        }, acc);\n    }\n    /* istanbul ignore if */\n    if (typeof rules !== 'string') {\n        return acc;\n    }\n    return rules.split('|').reduce((prev, rule) => {\n        const parsedRule = parseRule(rule);\n        if (!parsedRule.name) {\n            return prev;\n        }\n        prev[parsedRule.name] = buildParams(parsedRule.params);\n        return prev;\n    }, acc);\n}\n/**\n * Normalizes a rule param.\n */\nfunction normalizeParams(params) {\n    if (params === true) {\n        return [];\n    }\n    if (Array.isArray(params)) {\n        return params;\n    }\n    if (isObject(params)) {\n        return params;\n    }\n    return [params];\n}\nfunction buildParams(provided) {\n    const mapValueToLocator = (value) => {\n        // A target param using interpolation\n        if (typeof value === 'string' && value[0] === '@') {\n            return createLocator(value.slice(1));\n        }\n        return value;\n    };\n    if (Array.isArray(provided)) {\n        return provided.map(mapValueToLocator);\n    }\n    // #3073\n    if (provided instanceof RegExp) {\n        return [provided];\n    }\n    return Object.keys(provided).reduce((prev, key) => {\n        prev[key] = mapValueToLocator(provided[key]);\n        return prev;\n    }, {});\n}\n/**\n * Parses a rule string expression.\n */\nconst parseRule = (rule) => {\n    let params = [];\n    const name = rule.split(':')[0];\n    if (rule.includes(':')) {\n        params = rule.split(':').slice(1).join(':').split(',');\n    }\n    return { name, params };\n};\nfunction createLocator(value) {\n    const locator = (crossTable) => {\n        const val = getFromPath(crossTable, value) || crossTable[value];\n        return val;\n    };\n    locator.__locatorRef = value;\n    return locator;\n}\nfunction extractLocators(params) {\n    if (Array.isArray(params)) {\n        return params.filter(isLocator);\n    }\n    return keysOf(params)\n        .filter(key => isLocator(params[key]))\n        .map(key => params[key]);\n}\n\nconst DEFAULT_CONFIG = {\n    generateMessage: ({ field }) => `${field} is not valid.`,\n    bails: true,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validateOnInput: false,\n    validateOnModelUpdate: true,\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\nconst getConfig = () => currentConfig;\nconst setConfig = (newConf) => {\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\nconst configure = setConfig;\n\n/**\n * Validates a value against the rules.\n */\nasync function validate(value, rules, options = {}) {\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n    const field = {\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n        rules,\n        label: options === null || options === void 0 ? void 0 : options.label,\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\n    };\n    const result = await _validate(field, value);\n    const errors = result.errors;\n    return {\n        errors,\n        valid: !errors.length,\n    };\n}\n/**\n * Starts the validation process.\n */\nasync function _validate(field, value) {\n    if (isTypedSchema(field.rules) || isYupValidator(field.rules)) {\n        return validateFieldWithTypedSchema(value, field.rules);\n    }\n    // if a generic function or chain of generic functions\n    if (isCallable(field.rules) || Array.isArray(field.rules)) {\n        const ctx = {\n            field: field.label || field.name,\n            name: field.name,\n            label: field.label,\n            form: field.formData,\n            value,\n        };\n        // Normalize the pipeline\n        const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n        const length = pipeline.length;\n        const errors = [];\n        for (let i = 0; i < length; i++) {\n            const rule = pipeline[i];\n            const result = await rule(value, ctx);\n            const isValid = typeof result !== 'string' && !Array.isArray(result) && result;\n            if (isValid) {\n                continue;\n            }\n            if (Array.isArray(result)) {\n                errors.push(...result);\n            }\n            else {\n                const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n                errors.push(message);\n            }\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n        return {\n            errors,\n        };\n    }\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\n    const errors = [];\n    const rulesKeys = Object.keys(normalizedContext.rules);\n    const length = rulesKeys.length;\n    for (let i = 0; i < length; i++) {\n        const rule = rulesKeys[i];\n        const result = await _test(normalizedContext, value, {\n            name: rule,\n            params: normalizedContext.rules[rule],\n        });\n        if (result.error) {\n            errors.push(result.error);\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n    }\n    return {\n        errors,\n    };\n}\nfunction isYupError(err) {\n    return !!err && err.name === 'ValidationError';\n}\nfunction yupToTypedSchema(yupSchema) {\n    const schema = {\n        __type: 'VVTypedSchema',\n        async parse(values) {\n            var _a;\n            try {\n                const output = await yupSchema.validate(values, { abortEarly: false });\n                return {\n                    output,\n                    errors: [],\n                };\n            }\n            catch (err) {\n                // Yup errors have a name prop one them.\n                // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n                if (!isYupError(err)) {\n                    throw err;\n                }\n                if (!((_a = err.inner) === null || _a === void 0 ? void 0 : _a.length) && err.errors.length) {\n                    return { errors: [{ path: err.path, errors: err.errors }] };\n                }\n                const errors = err.inner.reduce((acc, curr) => {\n                    const path = curr.path || '';\n                    if (!acc[path]) {\n                        acc[path] = { errors: [], path };\n                    }\n                    acc[path].errors.push(...curr.errors);\n                    return acc;\n                }, {});\n                return { errors: Object.values(errors) };\n            }\n        },\n    };\n    return schema;\n}\n/**\n * Handles yup validation\n */\nasync function validateFieldWithTypedSchema(value, schema) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const result = await typedSchema.parse(value);\n    const messages = [];\n    for (const error of result.errors) {\n        if (error.errors.length) {\n            messages.push(...error.errors);\n        }\n    }\n    return {\n        errors: messages,\n    };\n}\n/**\n * Tests a single input value against a rule.\n */\nasync function _test(field, value, rule) {\n    const validator = resolveRule(rule.name);\n    if (!validator) {\n        throw new Error(`No such validator '${rule.name}' exists.`);\n    }\n    const params = fillTargetValues(rule.params, field.formData);\n    const ctx = {\n        field: field.label || field.name,\n        name: field.name,\n        label: field.label,\n        value,\n        form: field.formData,\n        rule: Object.assign(Object.assign({}, rule), { params }),\n    };\n    const result = await validator(value, params, ctx);\n    if (typeof result === 'string') {\n        return {\n            error: result,\n        };\n    }\n    return {\n        error: result ? undefined : _generateFieldError(ctx),\n    };\n}\n/**\n * Generates error messages.\n */\nfunction _generateFieldError(fieldCtx) {\n    const message = getConfig().generateMessage;\n    if (!message) {\n        return 'Field is invalid';\n    }\n    return message(fieldCtx);\n}\nfunction fillTargetValues(params, crossTable) {\n    const normalize = (value) => {\n        if (isLocator(value)) {\n            return value(crossTable);\n        }\n        return value;\n    };\n    if (Array.isArray(params)) {\n        return params.map(normalize);\n    }\n    return Object.keys(params).reduce((acc, param) => {\n        acc[param] = normalize(params[param]);\n        return acc;\n    }, {});\n}\nasync function validateTypedSchema(schema, values) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const validationResult = await typedSchema.parse(values);\n    const results = {};\n    const errors = {};\n    for (const error of validationResult.errors) {\n        const messages = error.errors;\n        // Fixes issue with path mapping with Yup 1.0 including quotes around array indices\n        const path = (error.path || '').replace(/\\[\"(\\d+)\"\\]/g, (_, m) => {\n            return `[${m}]`;\n        });\n        results[path] = { valid: !messages.length, errors: messages };\n        if (messages.length) {\n            errors[path] = messages[0];\n        }\n    }\n    return {\n        valid: !validationResult.errors.length,\n        results,\n        errors,\n        values: validationResult.value,\n    };\n}\nasync function validateObjectSchema(schema, values, opts) {\n    const paths = keysOf(schema);\n    const validations = paths.map(async (path) => {\n        var _a, _b, _c;\n        const strings = (_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path];\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\n            name: (strings === null || strings === void 0 ? void 0 : strings.name) || path,\n            label: strings === null || strings === void 0 ? void 0 : strings.label,\n            values: values,\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\n        });\n        return Object.assign(Object.assign({}, fieldResult), { path });\n    });\n    let isAllValid = true;\n    const validationResults = await Promise.all(validations);\n    const results = {};\n    const errors = {};\n    for (const result of validationResults) {\n        results[result.path] = {\n            valid: result.valid,\n            errors: result.errors,\n        };\n        if (!result.valid) {\n            isAllValid = false;\n            errors[result.path] = result.errors[0];\n        }\n    }\n    return {\n        valid: isAllValid,\n        results,\n        errors,\n    };\n}\n\nlet ID_COUNTER = 0;\nfunction useFieldState(path, init) {\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, init.form);\n    if (!init.form) {\n        const { errors, setErrors } = createFieldErrors();\n        const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n        const meta = createFieldMeta(value, initialValue, errors);\n        function setState(state) {\n            var _a;\n            if ('value' in state) {\n                value.value = state.value;\n            }\n            if ('errors' in state) {\n                setErrors(state.errors);\n            }\n            if ('touched' in state) {\n                meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n            }\n            if ('initialValue' in state) {\n                setInitialValue(state.initialValue);\n            }\n        }\n        return {\n            id,\n            path,\n            value,\n            initialValue,\n            meta,\n            flags: { pendingUnmount: { [id]: false } },\n            errors,\n            setState,\n        };\n    }\n    const state = init.form.createPathState(path, {\n        bails: init.bails,\n        label: init.label,\n        type: init.type,\n        validate: init.validate,\n    });\n    const errors = computed(() => state.errors);\n    function setState(state) {\n        var _a, _b, _c;\n        if ('value' in state) {\n            value.value = state.value;\n        }\n        if ('errors' in state) {\n            (_a = init.form) === null || _a === void 0 ? void 0 : _a.setFieldError(unref(path), state.errors);\n        }\n        if ('touched' in state) {\n            (_b = init.form) === null || _b === void 0 ? void 0 : _b.setFieldTouched(unref(path), (_c = state.touched) !== null && _c !== void 0 ? _c : false);\n        }\n        if ('initialValue' in state) {\n            setInitialValue(state.initialValue);\n        }\n    }\n    return {\n        id: Array.isArray(state.id) ? state.id[state.id.length - 1] : state.id,\n        path,\n        value,\n        errors,\n        meta: state,\n        initialValue,\n        flags: state.__flags,\n        setState,\n    };\n}\n/**\n * Creates the field value and resolves the initial value\n */\nfunction _useFieldValue(path, modelValue, form) {\n    const modelRef = ref(unref(modelValue));\n    function resolveInitialValue() {\n        if (!form) {\n            return unref(modelRef);\n        }\n        return getFromPath(form.initialValues.value, unref(path), unref(modelRef));\n    }\n    function setInitialValue(value) {\n        if (!form) {\n            modelRef.value = value;\n            return;\n        }\n        form.stageInitialValue(unref(path), value, true);\n    }\n    const initialValue = computed(resolveInitialValue);\n    // if no form is associated, use a regular ref.\n    if (!form) {\n        const value = ref(resolveInitialValue());\n        return {\n            value,\n            initialValue,\n            setInitialValue,\n        };\n    }\n    // to set the initial value, first check if there is a current value, if there is then use it.\n    // otherwise use the configured initial value if it exists.\n    // prioritize model value over form values\n    // #3429\n    const currentValue = resolveModelValue(modelValue, form, initialValue, path);\n    form.stageInitialValue(unref(path), currentValue, true);\n    // otherwise use a computed setter that triggers the `setFieldValue`\n    const value = computed({\n        get() {\n            return getFromPath(form.values, unref(path));\n        },\n        set(newVal) {\n            form.setFieldValue(unref(path), newVal, false);\n        },\n    });\n    return {\n        value,\n        initialValue,\n        setInitialValue,\n    };\n}\n/*\n  to set the initial value, first check if there is a current value, if there is then use it.\n  otherwise use the configured initial value if it exists.\n  prioritize model value over form values\n  #3429\n*/\nfunction resolveModelValue(modelValue, form, initialValue, path) {\n    if (isRef(modelValue)) {\n        return unref(modelValue);\n    }\n    if (modelValue !== undefined) {\n        return modelValue;\n    }\n    return getFromPath(form.values, unref(path), unref(initialValue));\n}\n/**\n * Creates meta flags state and some associated effects with them\n */\nfunction createFieldMeta(currentValue, initialValue, errors) {\n    const meta = reactive({\n        touched: false,\n        pending: false,\n        valid: true,\n        validated: !!unref(errors).length,\n        initialValue: computed(() => unref(initialValue)),\n        dirty: computed(() => {\n            return !isEqual(unref(currentValue), unref(initialValue));\n        }),\n    });\n    watch(errors, value => {\n        meta.valid = !value.length;\n    }, {\n        immediate: true,\n        flush: 'sync',\n    });\n    return meta;\n}\n/**\n * Creates the error message state for the field state\n */\nfunction createFieldErrors() {\n    const errors = ref([]);\n    return {\n        errors,\n        setErrors: (messages) => {\n            errors.value = normalizeErrorItem(messages);\n        },\n    };\n}\n\nfunction installDevtoolsPlugin(app) {\n    if ((process.env.NODE_ENV !== 'production')) {\n        setupDevtoolsPlugin({\n            id: 'vee-validate-devtools-plugin',\n            label: 'VeeValidate Plugin',\n            packageName: 'vee-validate',\n            homepage: 'https://vee-validate.logaretm.com/v4',\n            app,\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\n        }, setupApiHooks);\n    }\n}\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n    setTimeout(async () => {\n        await nextTick();\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n    }, 100);\n}, 100);\nfunction registerFormWithDevTools(form) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FORMS[form.formId];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nfunction registerSingleFieldWithDevtools(field) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FIELDS[field.id];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n    error: 0xbd4b4b,\n    success: 0x06d77b,\n    unknown: 0x54436b,\n    white: 0xffffff,\n    black: 0x000000,\n    blue: 0x035397,\n    purple: 0xb980f0,\n    orange: 0xf5a962,\n    gray: 0xbbbfca,\n};\nlet SELECTED_NODE = null;\nfunction setupApiHooks(api) {\n    API = api;\n    api.addInspector({\n        id: INSPECTOR_ID,\n        icon: 'rule',\n        label: 'vee-validate',\n        noSelectionText: 'Select a vee-validate node to inspect',\n        actions: [\n            {\n                icon: 'done_outline',\n                tooltip: 'Validate selected item',\n                action: async () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'field') {\n                        await SELECTED_NODE.field.validate();\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'form') {\n                        await SELECTED_NODE.form.validate();\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'pathState') {\n                        await SELECTED_NODE.form.validateField(SELECTED_NODE.state.path);\n                    }\n                },\n            },\n            {\n                icon: 'delete_sweep',\n                tooltip: 'Clear validation state of the selected item',\n                action: () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'field') {\n                        SELECTED_NODE.field.resetField();\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'form') {\n                        SELECTED_NODE.form.resetForm();\n                    }\n                    if (SELECTED_NODE.type === 'pathState') {\n                        SELECTED_NODE.form.resetField(SELECTED_NODE.state.path);\n                    }\n                },\n            },\n        ],\n    });\n    api.on.getInspectorTree(payload => {\n        if (payload.inspectorId !== INSPECTOR_ID) {\n            return;\n        }\n        const forms = Object.values(DEVTOOLS_FORMS);\n        const fields = Object.values(DEVTOOLS_FIELDS);\n        payload.rootNodes = [\n            ...forms.map(mapFormForDevtoolsInspector),\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\n        ];\n    });\n    api.on.getInspectorState((payload, ctx) => {\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n            return;\n        }\n        const { form, field, state, type } = decodeNodeId(payload.nodeId);\n        if (form && type === 'form') {\n            payload.state = buildFormState(form);\n            SELECTED_NODE = { type: 'form', form };\n            return;\n        }\n        if (state && type === 'pathState' && form) {\n            payload.state = buildFieldState(state);\n            SELECTED_NODE = { type: 'pathState', state, form };\n            return;\n        }\n        if (field && type === 'field') {\n            payload.state = buildFieldState({\n                errors: field.errors.value,\n                dirty: field.meta.dirty,\n                valid: field.meta.valid,\n                touched: field.meta.touched,\n                value: field.value.value,\n                initialValue: field.meta.initialValue,\n            });\n            SELECTED_NODE = { field, type: 'field' };\n            return;\n        }\n        SELECTED_NODE = null;\n    });\n}\nfunction mapFormForDevtoolsInspector(form) {\n    const { textColor, bgColor } = getValidityColors(form.meta.value.valid);\n    const formTreeNodes = {};\n    Object.values(form.getAllPathStates()).forEach(state => {\n        setInPath(formTreeNodes, unref(state.path), mapPathForDevtoolsInspector(state, form));\n    });\n    function buildFormTree(tree, path = []) {\n        const key = [...path].pop();\n        if ('id' in tree) {\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\n        }\n        if (isObject(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: key || '',\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\n            };\n        }\n        if (Array.isArray(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: `${key}[]`,\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\n            };\n        }\n        return { id: '', label: '', children: [] };\n    }\n    const { children } = buildFormTree(formTreeNodes);\n    return {\n        id: encodeNodeId(form),\n        label: 'Form',\n        children,\n        tags: [\n            {\n                label: 'Form',\n                textColor,\n                backgroundColor: bgColor,\n            },\n            {\n                label: `${form.getAllPathStates().length} fields`,\n                textColor: COLORS.white,\n                backgroundColor: COLORS.unknown,\n            },\n        ],\n    };\n}\nfunction mapPathForDevtoolsInspector(state, form) {\n    return {\n        id: encodeNodeId(form, state),\n        label: unref(state.path),\n        tags: getFieldNodeTags(state.multiple, state.fieldsCount, state.type, state.valid, form),\n    };\n}\nfunction mapFieldForDevtoolsInspector(field, form) {\n    return {\n        id: encodeNodeId(form, field),\n        label: unref(field.name),\n        tags: getFieldNodeTags(false, 1, field.type, field.meta.valid, form),\n    };\n}\nfunction getFieldNodeTags(multiple, fieldsCount, type, valid, form) {\n    const { textColor, bgColor } = getValidityColors(valid);\n    return [\n        multiple\n            ? undefined\n            : {\n                label: 'Field',\n                textColor,\n                backgroundColor: bgColor,\n            },\n        !form\n            ? {\n                label: 'Standalone',\n                textColor: COLORS.black,\n                backgroundColor: COLORS.gray,\n            }\n            : undefined,\n        type === 'checkbox'\n            ? {\n                label: 'Checkbox',\n                textColor: COLORS.white,\n                backgroundColor: COLORS.blue,\n            }\n            : undefined,\n        type === 'radio'\n            ? {\n                label: 'Radio',\n                textColor: COLORS.white,\n                backgroundColor: COLORS.purple,\n            }\n            : undefined,\n        multiple\n            ? {\n                label: 'Multiple',\n                textColor: COLORS.black,\n                backgroundColor: COLORS.orange,\n            }\n            : undefined,\n    ].filter(Boolean);\n}\nfunction encodeNodeId(form, stateOrField) {\n    const type = stateOrField ? ('path' in stateOrField ? 'pathState' : 'field') : 'form';\n    const fieldPath = stateOrField ? ('path' in stateOrField ? stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.path : unref(stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.name)) : '';\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, type };\n    return btoa(encodeURIComponent(JSON.stringify(idObject)));\n}\nfunction decodeNodeId(nodeId) {\n    try {\n        const idObject = JSON.parse(decodeURIComponent(atob(nodeId)));\n        const form = DEVTOOLS_FORMS[idObject.f];\n        if (!form && idObject.ff) {\n            const field = DEVTOOLS_FIELDS[idObject.ff];\n            if (!field) {\n                return {};\n            }\n            return {\n                type: idObject.type,\n                field,\n            };\n        }\n        if (!form) {\n            return {};\n        }\n        const state = form.getPathState(idObject.ff);\n        return {\n            type: idObject.type,\n            form,\n            state,\n        };\n    }\n    catch (err) {\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n    }\n    return {};\n}\nfunction buildFieldState(state) {\n    return {\n        'Field state': [\n            { key: 'errors', value: state.errors },\n            {\n                key: 'initialValue',\n                value: state.initialValue,\n            },\n            {\n                key: 'currentValue',\n                value: state.value,\n            },\n            {\n                key: 'touched',\n                value: state.touched,\n            },\n            {\n                key: 'dirty',\n                value: state.dirty,\n            },\n            {\n                key: 'valid',\n                value: state.valid,\n            },\n        ],\n    };\n}\nfunction buildFormState(form) {\n    const { errorBag, meta, values, isSubmitting, isValidating, submitCount } = form;\n    return {\n        'Form state': [\n            {\n                key: 'submitCount',\n                value: submitCount.value,\n            },\n            {\n                key: 'isSubmitting',\n                value: isSubmitting.value,\n            },\n            {\n                key: 'isValidating',\n                value: isValidating.value,\n            },\n            {\n                key: 'touched',\n                value: meta.value.touched,\n            },\n            {\n                key: 'dirty',\n                value: meta.value.dirty,\n            },\n            {\n                key: 'valid',\n                value: meta.value.valid,\n            },\n            {\n                key: 'initialValues',\n                value: meta.value.initialValues,\n            },\n            {\n                key: 'currentValues',\n                value: values,\n            },\n            {\n                key: 'errors',\n                value: keysOf(errorBag.value).reduce((acc, key) => {\n                    var _a;\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n                    if (message) {\n                        acc[key] = message;\n                    }\n                    return acc;\n                }, {}),\n            },\n        ],\n    };\n}\n/**\n * Resolves the tag color based on the form state\n */\nfunction getValidityColors(valid) {\n    return {\n        bgColor: valid ? COLORS.success : COLORS.error,\n        textColor: valid ? COLORS.black : COLORS.white,\n    };\n}\n\n/**\n * Creates a field composite.\n */\nfunction useField(path, rules, opts) {\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n        return useFieldWithChecked(path, rules, opts);\n    }\n    return _useField(path, rules, opts);\n}\nfunction _useField(path, rules, opts) {\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, controlled, keepValueOnUnmount, syncVModel, form: controlForm, } = normalizeOptions(opts);\n    const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\n    const form = controlForm || injectedForm;\n    const name = computed(() => normalizeFormPath(toValue(path)));\n    const validator = computed(() => {\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n        if (schema) {\n            return undefined;\n        }\n        const rulesValue = unref(rules);\n        if (isYupValidator(rulesValue) ||\n            isTypedSchema(rulesValue) ||\n            isCallable(rulesValue) ||\n            Array.isArray(rulesValue)) {\n            return rulesValue;\n        }\n        return normalizeRules(rulesValue);\n    });\n    const { id, value, initialValue, meta, setState, errors, flags } = useFieldState(name, {\n        modelValue,\n        form,\n        bails,\n        label,\n        type,\n        validate: validator.value ? validate$1 : undefined,\n    });\n    const errorMessage = computed(() => errors.value[0]);\n    if (syncVModel) {\n        useVModel({ value, prop: syncVModel, handleChange });\n    }\n    /**\n     * Handles common onBlur meta update\n     */\n    const handleBlur = (evt, shouldValidate = false) => {\n        meta.touched = true;\n        if (shouldValidate) {\n            validateWithStateMutation();\n        }\n    };\n    async function validateCurrentValue(mode) {\n        var _a, _b;\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\n        }\n        if (validator.value) {\n            return validate(value.value, validator.value, {\n                name: unref(name),\n                label: unref(label),\n                values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n                bails,\n            });\n        }\n        return { valid: true, errors: [] };\n    }\n    const validateWithStateMutation = withLatest(async () => {\n        meta.pending = true;\n        meta.validated = true;\n        return validateCurrentValue('validated-only');\n    }, result => {\n        if (flags.pendingUnmount[field.id]) {\n            return;\n        }\n        setState({ errors: result.errors });\n        meta.pending = false;\n        meta.valid = result.valid;\n        return result;\n    });\n    const validateValidStateOnly = withLatest(async () => {\n        return validateCurrentValue('silent');\n    }, result => {\n        meta.valid = result.valid;\n        return result;\n    });\n    function validate$1(opts) {\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n            return validateValidStateOnly();\n        }\n        return validateWithStateMutation();\n    }\n    // Common input/change event handler\n    function handleChange(e, shouldValidate = true) {\n        const newValue = normalizeEventValue(e);\n        setValue(newValue, shouldValidate);\n    }\n    // Runs the initial validation\n    onMounted(() => {\n        if (validateOnMount) {\n            return validateWithStateMutation();\n        }\n        // validate self initially if no form was handling this\n        // forms should have their own initial silent validation run to make things more efficient\n        if (!form || !form.validateSchema) {\n            validateValidStateOnly();\n        }\n    });\n    function setTouched(isTouched) {\n        meta.touched = isTouched;\n    }\n    function resetField(state) {\n        var _a;\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\n        setState({\n            value: klona(newValue),\n            initialValue: klona(newValue),\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\n        });\n        meta.pending = false;\n        meta.validated = false;\n        validateValidStateOnly();\n    }\n    const vm = getCurrentInstance();\n    function setValue(newValue, shouldValidate = true) {\n        value.value = vm && syncVModel ? applyModelModifiers(newValue, vm.props.modelModifiers) : newValue;\n        const validateFn = shouldValidate ? validateWithStateMutation : validateValidStateOnly;\n        validateFn();\n    }\n    function setErrors(errors) {\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\n    }\n    const valueProxy = computed({\n        get() {\n            return value.value;\n        },\n        set(newValue) {\n            setValue(newValue, validateOnValueUpdate);\n        },\n    });\n    if ((process.env.NODE_ENV !== 'production')) {\n        watch(valueProxy, (value, oldValue) => {\n            if (!isObject(value)) {\n                return;\n            }\n            if (value === oldValue && isEqual(value, oldValue)) {\n                warn$1('Detected a possible deep change on field `value` ref, for nested changes please either set the entire ref value or use `setValue` or `handleChange`.');\n            }\n        }, { deep: true });\n    }\n    const field = {\n        id,\n        name,\n        label,\n        value: valueProxy,\n        meta,\n        errors,\n        errorMessage,\n        type,\n        checkedValue,\n        uncheckedValue,\n        bails,\n        keepValueOnUnmount,\n        resetField,\n        handleReset: () => resetField(),\n        validate: validate$1,\n        handleChange,\n        handleBlur,\n        setState,\n        setTouched,\n        setErrors,\n        setValue,\n    };\n    provide(FieldContextKey, field);\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\n        watch(rules, (value, oldValue) => {\n            if (isEqual(value, oldValue)) {\n                return;\n            }\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }, {\n            deep: true,\n        });\n    }\n    if ((process.env.NODE_ENV !== 'production')) {\n        field._vm = getCurrentInstance();\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\n            deep: true,\n        });\n        if (!form) {\n            registerSingleFieldWithDevtools(field);\n        }\n    }\n    // if no associated form return the field API immediately\n    if (!form) {\n        return field;\n    }\n    // associate the field with the given form\n    // extract cross-field dependencies in a computed prop\n    const dependencies = computed(() => {\n        const rulesVal = validator.value;\n        // is falsy, a function schema or a yup schema\n        if (!rulesVal ||\n            isCallable(rulesVal) ||\n            isYupValidator(rulesVal) ||\n            isTypedSchema(rulesVal) ||\n            Array.isArray(rulesVal)) {\n            return {};\n        }\n        return Object.keys(rulesVal).reduce((acc, rule) => {\n            const deps = extractLocators(rulesVal[rule])\n                .map((dep) => dep.__locatorRef)\n                .reduce((depAcc, depName) => {\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\n                if (depValue !== undefined) {\n                    depAcc[depName] = depValue;\n                }\n                return depAcc;\n            }, {});\n            Object.assign(acc, deps);\n            return acc;\n        }, {});\n    });\n    // Adds a watcher that runs the validation whenever field dependencies change\n    watch(dependencies, (deps, oldDeps) => {\n        // Skip if no dependencies or if the field wasn't manipulated\n        if (!Object.keys(deps).length) {\n            return;\n        }\n        const shouldValidate = !isEqual(deps, oldDeps);\n        if (shouldValidate) {\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }\n    });\n    onBeforeUnmount(() => {\n        var _a;\n        const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(form.keepValuesOnUnmount);\n        const path = toValue(name);\n        if (shouldKeepValue || !form || flags.pendingUnmount[field.id]) {\n            form === null || form === void 0 ? void 0 : form.removePathState(path, id);\n            return;\n        }\n        flags.pendingUnmount[field.id] = true;\n        const pathState = form.getPathState(path);\n        const matchesId = Array.isArray(pathState === null || pathState === void 0 ? void 0 : pathState.id) && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple)\n            ? pathState === null || pathState === void 0 ? void 0 : pathState.id.includes(field.id)\n            : (pathState === null || pathState === void 0 ? void 0 : pathState.id) === field.id;\n        if (!matchesId) {\n            return;\n        }\n        if ((pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && Array.isArray(pathState.value)) {\n            const valueIdx = pathState.value.findIndex(i => isEqual(i, unref(field.checkedValue)));\n            if (valueIdx > -1) {\n                const newVal = [...pathState.value];\n                newVal.splice(valueIdx, 1);\n                form.setFieldValue(path, newVal);\n            }\n            if (Array.isArray(pathState.id)) {\n                pathState.id.splice(pathState.id.indexOf(field.id), 1);\n            }\n        }\n        else {\n            form.unsetPathValue(toValue(name));\n        }\n        form.removePathState(path, id);\n    });\n    return field;\n}\n/**\n * Normalizes partial field options to include the full options\n */\nfunction normalizeOptions(opts) {\n    const defaults = () => ({\n        initialValue: undefined,\n        validateOnMount: false,\n        bails: true,\n        label: undefined,\n        validateOnValueUpdate: true,\n        keepValueOnUnmount: undefined,\n        syncVModel: false,\n        controlled: true,\n    });\n    const isVModelSynced = !!(opts === null || opts === void 0 ? void 0 : opts.syncVModel);\n    const modelPropName = typeof (opts === null || opts === void 0 ? void 0 : opts.syncVModel) === 'string' ? opts.syncVModel : (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || 'modelValue';\n    const initialValue = isVModelSynced && !('initialValue' in (opts || {}))\n        ? getCurrentModelValue(getCurrentInstance(), modelPropName)\n        : opts === null || opts === void 0 ? void 0 : opts.initialValue;\n    if (!opts) {\n        return Object.assign(Object.assign({}, defaults()), { initialValue });\n    }\n    // TODO: Deprecate this in next major release\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n    const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\n    const syncVModel = (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || (opts === null || opts === void 0 ? void 0 : opts.syncVModel) || false;\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { initialValue, controlled: controlled !== null && controlled !== void 0 ? controlled : true, checkedValue,\n        syncVModel });\n}\nfunction useFieldWithChecked(name, rules, opts) {\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n    function patchCheckedApi(field) {\n        const handleChange = field.handleChange;\n        const checked = computed(() => {\n            const currentValue = unref(field.value);\n            const checkedVal = unref(checkedValue);\n            return Array.isArray(currentValue)\n                ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0\n                : isEqual(checkedVal, currentValue);\n        });\n        function handleCheckboxChange(e, shouldValidate = true) {\n            var _a, _b;\n            if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n                if (shouldValidate) {\n                    field.validate();\n                }\n                return;\n            }\n            const path = toValue(name);\n            const pathState = form === null || form === void 0 ? void 0 : form.getPathState(path);\n            const value = normalizeEventValue(e);\n            let newValue = (_b = unref(checkedValue)) !== null && _b !== void 0 ? _b : value;\n            if (form && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && pathState.type === 'checkbox') {\n                newValue = resolveNextCheckboxValue(getFromPath(form.values, path) || [], newValue, undefined);\n            }\n            else if ((opts === null || opts === void 0 ? void 0 : opts.type) === 'checkbox') {\n                newValue = resolveNextCheckboxValue(unref(field.value), newValue, unref(uncheckedValue));\n            }\n            handleChange(newValue, shouldValidate);\n        }\n        return Object.assign(Object.assign({}, field), { checked,\n            checkedValue,\n            uncheckedValue, handleChange: handleCheckboxChange });\n    }\n    return patchCheckedApi(_useField(name, rules, opts));\n}\nfunction useVModel({ prop, value, handleChange }) {\n    const vm = getCurrentInstance();\n    /* istanbul ignore next */\n    if (!vm || !prop) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            console.warn('Failed to setup model events because `useField` was not called in setup.');\n        }\n        return;\n    }\n    const propName = typeof prop === 'string' ? prop : 'modelValue';\n    const emitName = `update:${propName}`;\n    // Component doesn't have a model prop setup (must be defined on the props)\n    if (!(propName in vm.props)) {\n        return;\n    }\n    watch(value, newValue => {\n        if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n            return;\n        }\n        vm.emit(emitName, newValue);\n    });\n    watch(() => getCurrentModelValue(vm, propName), propValue => {\n        if (propValue === IS_ABSENT && value.value === undefined) {\n            return;\n        }\n        const newValue = propValue === IS_ABSENT ? undefined : propValue;\n        if (isEqual(newValue, value.value)) {\n            return;\n        }\n        handleChange(newValue);\n    });\n}\nfunction getCurrentModelValue(vm, propName) {\n    if (!vm) {\n        return undefined;\n    }\n    return vm.props[propName];\n}\n\nconst FieldImpl = /** #__PURE__ */ defineComponent({\n    name: 'Field',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: [String, Object],\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n        rules: {\n            type: [Object, String, Function],\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        validateOnBlur: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnChange: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnInput: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnModelUpdate: {\n            type: Boolean,\n            default: undefined,\n        },\n        bails: {\n            type: Boolean,\n            default: () => getConfig().bails,\n        },\n        label: {\n            type: String,\n            default: undefined,\n        },\n        uncheckedValue: {\n            type: null,\n            default: undefined,\n        },\n        modelValue: {\n            type: null,\n            default: IS_ABSENT,\n        },\n        modelModifiers: {\n            type: null,\n            default: () => ({}),\n        },\n        'onUpdate:modelValue': {\n            type: null,\n            default: undefined,\n        },\n        standalone: {\n            type: Boolean,\n            default: false,\n        },\n        keepValue: {\n            type: Boolean,\n            default: undefined,\n        },\n    },\n    setup(props, ctx) {\n        const rules = toRef(props, 'rules');\n        const name = toRef(props, 'name');\n        const label = toRef(props, 'label');\n        const uncheckedValue = toRef(props, 'uncheckedValue');\n        const keepValue = toRef(props, 'keepValue');\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\n            validateOnMount: props.validateOnMount,\n            bails: props.bails,\n            standalone: props.standalone,\n            type: ctx.attrs.type,\n            initialValue: resolveInitialValue(props, ctx),\n            // Only for checkboxes and radio buttons\n            checkedValue: ctx.attrs.value,\n            uncheckedValue,\n            label,\n            validateOnValueUpdate: false,\n            keepValueOnUnmount: keepValue,\n            syncVModel: true,\n        });\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n        const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n            handleChange(e, shouldValidate);\n            ctx.emit('update:modelValue', value.value);\n        };\n        const sharedProps = computed(() => {\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\n            function baseOnBlur(e) {\n                handleBlur(e, validateOnBlur);\n                if (isCallable(ctx.attrs.onBlur)) {\n                    ctx.attrs.onBlur(e);\n                }\n            }\n            function baseOnInput(e) {\n                onChangeHandler(e, validateOnInput);\n                if (isCallable(ctx.attrs.onInput)) {\n                    ctx.attrs.onInput(e);\n                }\n            }\n            function baseOnChange(e) {\n                onChangeHandler(e, validateOnChange);\n                if (isCallable(ctx.attrs.onChange)) {\n                    ctx.attrs.onChange(e);\n                }\n            }\n            const attrs = {\n                name: props.name,\n                onBlur: baseOnBlur,\n                onInput: baseOnInput,\n                onChange: baseOnChange,\n            };\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n            return attrs;\n        });\n        const fieldProps = computed(() => {\n            const attrs = Object.assign({}, sharedProps.value);\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\n                attrs.checked = checked.value;\n            }\n            const tag = resolveTag(props, ctx);\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\n                attrs.value = value.value;\n            }\n            return attrs;\n        });\n        const componentProps = computed(() => {\n            return Object.assign(Object.assign({}, sharedProps.value), { modelValue: value.value });\n        });\n        function slotProps() {\n            return {\n                field: fieldProps.value,\n                componentField: componentProps.value,\n                value: value.value,\n                meta,\n                errors: errors.value,\n                errorMessage: errorMessage.value,\n                validate: validateField,\n                resetField,\n                handleChange: onChangeHandler,\n                handleInput: e => onChangeHandler(e, false),\n                handleReset,\n                handleBlur: sharedProps.value.onBlur,\n                setTouched,\n                setErrors,\n            };\n        }\n        ctx.expose({\n            setErrors,\n            setTouched,\n            reset: resetField,\n            validate: validateField,\n            handleChange,\n        });\n        return () => {\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (tag) {\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n            }\n            return children;\n        };\n    },\n});\nfunction resolveTag(props, ctx) {\n    let tag = props.as || '';\n    if (!props.as && !ctx.slots.default) {\n        tag = 'input';\n    }\n    return tag;\n}\nfunction resolveValidationTriggers(props) {\n    var _a, _b, _c, _d;\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\n    return {\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\n    };\n}\nfunction resolveInitialValue(props, ctx) {\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n    if (!hasCheckedAttr(ctx.attrs.type)) {\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n    }\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\nconst PRIVATE_PATH_STATE_KEYS = ['bails', 'fieldsCount', 'id', 'multiple', 'type', 'validate'];\nfunction resolveInitialValues(opts) {\n    const providedValues = unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {};\n    const schema = unref(opts === null || opts === void 0 ? void 0 : opts.validationSchema);\n    if (schema && isTypedSchema(schema) && isCallable(schema.cast)) {\n        return klona(schema.cast(providedValues) || {});\n    }\n    return klona(providedValues);\n}\nfunction useForm(opts) {\n    var _a;\n    const formId = FORM_COUNTER++;\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n    let FIELD_ID_COUNTER = 0;\n    // If the form is currently submitting\n    const isSubmitting = ref(false);\n    // If the form is currently validating\n    const isValidating = ref(false);\n    // The number of times the user tried to submit the form\n    const submitCount = ref(0);\n    // field arrays managed by this form\n    const fieldArrays = [];\n    // a private ref for all form values\n    const formValues = reactive(resolveInitialValues(opts));\n    const pathStates = ref([]);\n    const extraErrorsBag = ref({});\n    const pathStateLookup = ref({});\n    const rebuildPathLookup = debounceNextTick(() => {\n        pathStateLookup.value = pathStates.value.reduce((names, state) => {\n            names[normalizeFormPath(toValue(state.path))] = state;\n            return names;\n        }, {});\n    });\n    /**\n     * Manually sets an error message on a specific field\n     */\n    function setFieldError(field, message) {\n        const state = findPathState(field);\n        if (!state) {\n            if (typeof field === 'string') {\n                extraErrorsBag.value[normalizeFormPath(field)] = normalizeErrorItem(message);\n            }\n            return;\n        }\n        // Move the error from the extras path if exists\n        if (typeof field === 'string') {\n            const normalizedPath = normalizeFormPath(field);\n            if (extraErrorsBag.value[normalizedPath]) {\n                delete extraErrorsBag.value[normalizedPath];\n            }\n        }\n        state.errors = normalizeErrorItem(message);\n        state.valid = !state.errors.length;\n    }\n    /**\n     * Sets errors for the fields specified in the object\n     */\n    function setErrors(paths) {\n        keysOf(paths).forEach(path => {\n            setFieldError(path, paths[path]);\n        });\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n        setErrors(opts.initialErrors);\n    }\n    const errorBag = computed(() => {\n        const pathErrors = pathStates.value.reduce((acc, state) => {\n            if (state.errors.length) {\n                acc[state.path] = state.errors;\n            }\n            return acc;\n        }, {});\n        return Object.assign(Object.assign({}, extraErrorsBag.value), pathErrors);\n    });\n    // Gets the first error of each field\n    const errors = computed(() => {\n        return keysOf(errorBag.value).reduce((acc, key) => {\n            const errors = errorBag.value[key];\n            if (errors === null || errors === void 0 ? void 0 : errors.length) {\n                acc[key] = errors[0];\n            }\n            return acc;\n        }, {});\n    });\n    /**\n     * Holds a computed reference to all fields names and labels\n     */\n    const fieldNames = computed(() => {\n        return pathStates.value.reduce((names, state) => {\n            names[state.path] = { name: state.path || '', label: state.label || '' };\n            return names;\n        }, {});\n    });\n    const fieldBailsMap = computed(() => {\n        return pathStates.value.reduce((map, state) => {\n            var _a;\n            map[state.path] = (_a = state.bails) !== null && _a !== void 0 ? _a : true;\n            return map;\n        }, {});\n    });\n    // mutable non-reactive reference to initial errors\n    // we need this to process initial errors then unset them\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\n    const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\n    // initial form values\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(pathStates, formValues, opts);\n    // form meta aggregations\n    const meta = useFormMeta(pathStates, formValues, originalInitialValues, errors);\n    const controlledValues = computed(() => {\n        return pathStates.value.reduce((acc, state) => {\n            const value = getFromPath(formValues, state.path);\n            setInPath(acc, state.path, value);\n            return acc;\n        }, {});\n    });\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n    function createPathState(path, config) {\n        var _a, _b;\n        const initialValue = computed(() => getFromPath(initialValues.value, toValue(path)));\n        const pathStateExists = pathStateLookup.value[toValue(path)];\n        if (pathStateExists) {\n            if ((config === null || config === void 0 ? void 0 : config.type) === 'checkbox' || (config === null || config === void 0 ? void 0 : config.type) === 'radio') {\n                pathStateExists.multiple = true;\n            }\n            const id = FIELD_ID_COUNTER++;\n            if (Array.isArray(pathStateExists.id)) {\n                pathStateExists.id.push(id);\n            }\n            else {\n                pathStateExists.id = [pathStateExists.id, id];\n            }\n            pathStateExists.fieldsCount++;\n            pathStateExists.__flags.pendingUnmount[id] = false;\n            return pathStateExists;\n        }\n        const currentValue = computed(() => getFromPath(formValues, toValue(path)));\n        const pathValue = toValue(path);\n        const id = FIELD_ID_COUNTER++;\n        const state = reactive({\n            id,\n            path,\n            touched: false,\n            pending: false,\n            valid: true,\n            validated: !!((_a = initialErrors[pathValue]) === null || _a === void 0 ? void 0 : _a.length),\n            initialValue,\n            errors: shallowRef([]),\n            bails: (_b = config === null || config === void 0 ? void 0 : config.bails) !== null && _b !== void 0 ? _b : false,\n            label: config === null || config === void 0 ? void 0 : config.label,\n            type: (config === null || config === void 0 ? void 0 : config.type) || 'default',\n            value: currentValue,\n            multiple: false,\n            __flags: {\n                pendingUnmount: { [id]: false },\n            },\n            fieldsCount: 1,\n            validate: config === null || config === void 0 ? void 0 : config.validate,\n            dirty: computed(() => {\n                return !isEqual(unref(currentValue), unref(initialValue));\n            }),\n        });\n        pathStates.value.push(state);\n        pathStateLookup.value[pathValue] = state;\n        rebuildPathLookup();\n        if (errors.value[pathValue] && !initialErrors[pathValue]) {\n            nextTick(() => {\n                validateField(pathValue, { mode: 'silent' });\n            });\n        }\n        // Handles when a path changes\n        if (isRef(path)) {\n            watch(path, newPath => {\n                rebuildPathLookup();\n                const nextValue = klona(currentValue.value);\n                pathStateLookup.value[newPath] = state;\n                nextTick(() => {\n                    setInPath(formValues, newPath, nextValue);\n                });\n            });\n        }\n        return state;\n    }\n    /**\n     * Batches validation runs in 5ms batches\n     * Must have two distinct batch queues to make sure they don't override each other settings #3783\n     */\n    const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n    const debouncedValidation = debounceAsync(_validateSchema, 5);\n    const validateSchema = withLatest(async (mode) => {\n        return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\n    }, (formResult, [mode]) => {\n        // fields by id lookup\n        // errors fields names, we need it to also check if custom errors are updated\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\n        // collect all the keys from the schema and all fields\n        // this ensures we have a complete key map of all the fields\n        const paths = [\n            ...new Set([...keysOf(formResult.results), ...pathStates.value.map(p => p.path), ...currentErrorsPaths]),\n        ].sort();\n        // aggregates the paths into a single result object while applying the results on the fields\n        return paths.reduce((validation, _path) => {\n            const path = _path;\n            const pathState = findPathState(path) || findHoistedPath(path);\n            const messages = (formResult.results[path] || { errors: [] }).errors;\n            const fieldResult = {\n                errors: messages,\n                valid: !messages.length,\n            };\n            validation.results[path] = fieldResult;\n            if (!fieldResult.valid) {\n                validation.errors[path] = fieldResult.errors[0];\n            }\n            // clean up extra errors if path state exists\n            if (pathState && extraErrorsBag.value[path]) {\n                delete extraErrorsBag.value[path];\n            }\n            // field not rendered\n            if (!pathState) {\n                setFieldError(path, messages);\n                return validation;\n            }\n            // always update the valid flag regardless of the mode\n            pathState.valid = fieldResult.valid;\n            if (mode === 'silent') {\n                return validation;\n            }\n            if (mode === 'validated-only' && !pathState.validated) {\n                return validation;\n            }\n            setFieldError(pathState, fieldResult.errors);\n            return validation;\n        }, { valid: formResult.valid, results: {}, errors: {} });\n    });\n    function mutateAllPathState(mutation) {\n        pathStates.value.forEach(mutation);\n    }\n    function findPathState(path) {\n        const normalizedPath = typeof path === 'string' ? normalizeFormPath(path) : path;\n        const pathState = typeof normalizedPath === 'string' ? pathStateLookup.value[normalizedPath] : normalizedPath;\n        return pathState;\n    }\n    function findHoistedPath(path) {\n        const candidates = pathStates.value.filter(state => path.startsWith(state.path));\n        return candidates.reduce((bestCandidate, candidate) => {\n            if (!bestCandidate) {\n                return candidate;\n            }\n            return (candidate.path.length > bestCandidate.path.length ? candidate : bestCandidate);\n        }, undefined);\n    }\n    let UNSET_BATCH = [];\n    let PENDING_UNSET;\n    function unsetPathValue(path) {\n        UNSET_BATCH.push(path);\n        if (!PENDING_UNSET) {\n            PENDING_UNSET = nextTick(() => {\n                const sortedPaths = [...UNSET_BATCH].sort().reverse();\n                sortedPaths.forEach(p => {\n                    unsetPath(formValues, p);\n                });\n                UNSET_BATCH = [];\n                PENDING_UNSET = null;\n            });\n        }\n        return PENDING_UNSET;\n    }\n    function makeSubmissionFactory(onlyControlled) {\n        return function submitHandlerFactory(fn, onValidationError) {\n            return function submissionHandler(e) {\n                if (e instanceof Event) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                // Touch all fields\n                mutateAllPathState(s => (s.touched = true));\n                isSubmitting.value = true;\n                submitCount.value++;\n                return validate()\n                    .then(result => {\n                    const values = klona(formValues);\n                    if (result.valid && typeof fn === 'function') {\n                        const controlled = klona(controlledValues.value);\n                        let submittedValues = (onlyControlled ? controlled : values);\n                        if (result.values) {\n                            submittedValues = result.values;\n                        }\n                        return fn(submittedValues, {\n                            evt: e,\n                            controlledValues: controlled,\n                            setErrors,\n                            setFieldError,\n                            setTouched,\n                            setFieldTouched,\n                            setValues,\n                            setFieldValue,\n                            resetForm,\n                            resetField,\n                        });\n                    }\n                    if (!result.valid && typeof onValidationError === 'function') {\n                        onValidationError({\n                            values,\n                            evt: e,\n                            errors: result.errors,\n                            results: result.results,\n                        });\n                    }\n                })\n                    .then(returnVal => {\n                    isSubmitting.value = false;\n                    return returnVal;\n                }, err => {\n                    isSubmitting.value = false;\n                    // re-throw the err so it doesn't go silent\n                    throw err;\n                });\n            };\n        };\n    }\n    const handleSubmitImpl = makeSubmissionFactory(false);\n    const handleSubmit = handleSubmitImpl;\n    handleSubmit.withControlled = makeSubmissionFactory(true);\n    function removePathState(path, id) {\n        const idx = pathStates.value.findIndex(s => s.path === path);\n        const pathState = pathStates.value[idx];\n        if (idx === -1 || !pathState) {\n            return;\n        }\n        nextTick(() => {\n            validateField(path, { mode: 'silent', warn: false });\n        });\n        if (pathState.multiple && pathState.fieldsCount) {\n            pathState.fieldsCount--;\n        }\n        if (Array.isArray(pathState.id)) {\n            const idIndex = pathState.id.indexOf(id);\n            if (idIndex >= 0) {\n                pathState.id.splice(idIndex, 1);\n            }\n            delete pathState.__flags.pendingUnmount[id];\n        }\n        if (!pathState.multiple || pathState.fieldsCount <= 0) {\n            pathStates.value.splice(idx, 1);\n            unsetInitialValue(path);\n            rebuildPathLookup();\n            delete pathStateLookup.value[path];\n        }\n    }\n    function markForUnmount(path) {\n        return mutateAllPathState(s => {\n            if (s.path.startsWith(path)) {\n                keysOf(s.__flags.pendingUnmount).forEach(id => {\n                    s.__flags.pendingUnmount[id] = true;\n                });\n            }\n        });\n    }\n    const formCtx = {\n        formId,\n        values: formValues,\n        controlledValues,\n        errorBag,\n        errors,\n        schema,\n        submitCount,\n        meta,\n        isSubmitting,\n        isValidating,\n        fieldArrays,\n        keepValuesOnUnmount,\n        validateSchema: unref(schema) ? validateSchema : undefined,\n        validate,\n        setFieldError,\n        validateField,\n        setFieldValue,\n        setValues,\n        setErrors,\n        setFieldTouched,\n        setTouched,\n        resetForm,\n        resetField,\n        handleSubmit,\n        stageInitialValue,\n        unsetInitialValue,\n        setFieldInitialValue,\n        useFieldModel,\n        createPathState,\n        getPathState: findPathState,\n        unsetPathValue,\n        removePathState,\n        initialValues: initialValues,\n        getAllPathStates: () => pathStates.value,\n        markForUnmount,\n    };\n    /**\n     * Sets a single field value\n     */\n    function setFieldValue(field, value, shouldValidate = true) {\n        const clonedValue = klona(value);\n        const path = typeof field === 'string' ? field : field.path;\n        const pathState = findPathState(path);\n        if (!pathState) {\n            createPathState(path);\n        }\n        setInPath(formValues, path, clonedValue);\n        if (shouldValidate) {\n            validateField(path);\n        }\n    }\n    /**\n     * Sets multiple fields values\n     */\n    function setValues(fields, shouldValidate = true) {\n        merge(formValues, fields);\n        // regenerate the arrays when the form values change\n        fieldArrays.forEach(f => f && f.reset());\n        if (shouldValidate) {\n            validate();\n        }\n    }\n    function createModel(path) {\n        const pathState = findPathState(unref(path)) || createPathState(path);\n        return computed({\n            get() {\n                return pathState.value;\n            },\n            set(value) {\n                const pathValue = unref(path);\n                setFieldValue(pathValue, value, false);\n                pathState.validated = true;\n                pathState.pending = true;\n                validateField(pathValue).then(() => {\n                    pathState.pending = false;\n                });\n            },\n        });\n    }\n    function useFieldModel(pathOrPaths) {\n        if (!Array.isArray(pathOrPaths)) {\n            return createModel(pathOrPaths);\n        }\n        return pathOrPaths.map(createModel);\n    }\n    /**\n     * Sets the touched meta state on a field\n     */\n    function setFieldTouched(field, isTouched) {\n        const pathState = findPathState(field);\n        if (pathState) {\n            pathState.touched = isTouched;\n        }\n    }\n    /**\n     * Sets the touched meta state on multiple fields\n     */\n    function setTouched(fields) {\n        if (typeof fields === 'boolean') {\n            mutateAllPathState(state => {\n                state.touched = fields;\n            });\n            return;\n        }\n        keysOf(fields).forEach(field => {\n            setFieldTouched(field, !!fields[field]);\n        });\n    }\n    function resetField(field, state) {\n        var _a;\n        const newValue = state && 'value' in state ? state.value : getFromPath(initialValues.value, field);\n        setFieldInitialValue(field, klona(newValue));\n        setFieldValue(field, newValue, false);\n        setFieldTouched(field, (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false);\n        setFieldError(field, (state === null || state === void 0 ? void 0 : state.errors) || []);\n    }\n    /**\n     * Resets all fields\n     */\n    function resetForm(resetState) {\n        let newValues = (resetState === null || resetState === void 0 ? void 0 : resetState.values) ? resetState.values : originalInitialValues.value;\n        newValues = isTypedSchema(schema) && isCallable(schema.cast) ? schema.cast(newValues) : newValues;\n        setInitialValues(newValues);\n        mutateAllPathState(state => {\n            var _a;\n            state.validated = false;\n            state.touched = ((_a = resetState === null || resetState === void 0 ? void 0 : resetState.touched) === null || _a === void 0 ? void 0 : _a[state.path]) || false;\n            setFieldValue(state.path, getFromPath(newValues, state.path), false);\n            setFieldError(state.path, undefined);\n        });\n        setValues(newValues, false);\n        setErrors((resetState === null || resetState === void 0 ? void 0 : resetState.errors) || {});\n        submitCount.value = (resetState === null || resetState === void 0 ? void 0 : resetState.submitCount) || 0;\n        nextTick(() => {\n            validate({ mode: 'silent' });\n        });\n    }\n    async function validate(opts) {\n        const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\n        if (mode === 'force') {\n            mutateAllPathState(f => (f.validated = true));\n        }\n        if (formCtx.validateSchema) {\n            return formCtx.validateSchema(mode);\n        }\n        isValidating.value = true;\n        // No schema, each field is responsible to validate itself\n        const validations = await Promise.all(pathStates.value.map(state => {\n            if (!state.validate) {\n                return Promise.resolve({\n                    key: state.path,\n                    valid: true,\n                    errors: [],\n                });\n            }\n            return state.validate(opts).then((result) => {\n                return {\n                    key: state.path,\n                    valid: result.valid,\n                    errors: result.errors,\n                };\n            });\n        }));\n        isValidating.value = false;\n        const results = {};\n        const errors = {};\n        for (const validation of validations) {\n            results[validation.key] = {\n                valid: validation.valid,\n                errors: validation.errors,\n            };\n            if (validation.errors.length) {\n                errors[validation.key] = validation.errors[0];\n            }\n        }\n        return {\n            valid: validations.every(r => r.valid),\n            results,\n            errors,\n        };\n    }\n    async function validateField(path, opts) {\n        var _a;\n        const state = findPathState(path);\n        if (state) {\n            state.validated = true;\n        }\n        if (schema) {\n            const { results } = await validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'validated-only');\n            return results[path] || { errors: [], valid: true };\n        }\n        if (state === null || state === void 0 ? void 0 : state.validate) {\n            return state.validate(opts);\n        }\n        const shouldWarn = !state && ((_a = opts === null || opts === void 0 ? void 0 : opts.warn) !== null && _a !== void 0 ? _a : true);\n        if (shouldWarn) {\n            warn$1(`field with path ${path} was not found`);\n        }\n        return Promise.resolve({ errors: [], valid: true });\n    }\n    function unsetInitialValue(path) {\n        unsetPath(initialValues.value, path);\n    }\n    /**\n     * Sneaky function to set initial field values\n     */\n    function stageInitialValue(path, value, updateOriginal = false) {\n        setFieldInitialValue(path, value);\n        setInPath(formValues, path, value);\n        if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n            setInPath(originalInitialValues.value, path, klona(value));\n        }\n    }\n    function setFieldInitialValue(path, value) {\n        setInPath(initialValues.value, path, klona(value));\n    }\n    async function _validateSchema() {\n        const schemaValue = unref(schema);\n        if (!schemaValue) {\n            return { valid: true, results: {}, errors: {} };\n        }\n        isValidating.value = true;\n        const formResult = isYupValidator(schemaValue) || isTypedSchema(schemaValue)\n            ? await validateTypedSchema(schemaValue, formValues)\n            : await validateObjectSchema(schemaValue, formValues, {\n                names: fieldNames.value,\n                bailsMap: fieldBailsMap.value,\n            });\n        isValidating.value = false;\n        return formResult;\n    }\n    const submitForm = handleSubmit((_, { evt }) => {\n        if (isFormSubmitEvent(evt)) {\n            evt.target.submit();\n        }\n    });\n    // Trigger initial validation\n    onMounted(() => {\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n            setErrors(opts.initialErrors);\n        }\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n            setTouched(opts.initialTouched);\n        }\n        // if validate on mount was enabled\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n            validate();\n            return;\n        }\n        // otherwise run initial silent validation through schema if available\n        // the useField should skip their own silent validation if a yup schema is present\n        if (formCtx.validateSchema) {\n            formCtx.validateSchema('silent');\n        }\n    });\n    if (isRef(schema)) {\n        watch(schema, () => {\n            var _a;\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n        });\n    }\n    // Provide injections\n    provide(FormContextKey, formCtx);\n    if ((process.env.NODE_ENV !== 'production')) {\n        registerFormWithDevTools(formCtx);\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, isValidating: isValidating.value, submitCount: submitCount.value })), refreshInspector, {\n            deep: true,\n        });\n    }\n    function defineComponentBinds(path, config) {\n        const pathState = findPathState(toValue(path)) || createPathState(path);\n        const evalConfig = () => (isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {});\n        function onBlur() {\n            var _a;\n            pathState.touched = true;\n            const validateOnBlur = (_a = evalConfig().validateOnBlur) !== null && _a !== void 0 ? _a : getConfig().validateOnBlur;\n            if (validateOnBlur) {\n                validateField(pathState.path);\n            }\n        }\n        function onUpdateModelValue(value) {\n            var _a;\n            const validateOnModelUpdate = (_a = evalConfig().validateOnModelUpdate) !== null && _a !== void 0 ? _a : getConfig().validateOnModelUpdate;\n            setFieldValue(pathState.path, value, validateOnModelUpdate);\n        }\n        const props = computed(() => {\n            if (isCallable(config)) {\n                const configVal = config(pathState);\n                const model = configVal.model || 'modelValue';\n                return Object.assign({ onBlur, [model]: pathState.value, [`onUpdate:${model}`]: onUpdateModelValue }, (configVal.props || {}));\n            }\n            const model = (config === null || config === void 0 ? void 0 : config.model) || 'modelValue';\n            const base = {\n                onBlur,\n                [model]: pathState.value,\n                [`onUpdate:${model}`]: onUpdateModelValue,\n            };\n            if (config === null || config === void 0 ? void 0 : config.mapProps) {\n                return Object.assign(Object.assign({}, base), config.mapProps(omit(pathState, PRIVATE_PATH_STATE_KEYS)));\n            }\n            return base;\n        });\n        return props;\n    }\n    function defineInputBinds(path, config) {\n        const pathState = (findPathState(toValue(path)) || createPathState(path));\n        const evalConfig = () => (isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {});\n        function onBlur() {\n            var _a;\n            pathState.touched = true;\n            const validateOnBlur = (_a = evalConfig().validateOnBlur) !== null && _a !== void 0 ? _a : getConfig().validateOnBlur;\n            if (validateOnBlur) {\n                validateField(pathState.path);\n            }\n        }\n        function onInput(e) {\n            var _a;\n            const value = normalizeEventValue(e);\n            const validateOnInput = (_a = evalConfig().validateOnInput) !== null && _a !== void 0 ? _a : getConfig().validateOnInput;\n            setFieldValue(pathState.path, value, validateOnInput);\n        }\n        function onChange(e) {\n            var _a;\n            const value = normalizeEventValue(e);\n            const validateOnChange = (_a = evalConfig().validateOnChange) !== null && _a !== void 0 ? _a : getConfig().validateOnChange;\n            setFieldValue(pathState.path, value, validateOnChange);\n        }\n        const props = computed(() => {\n            const base = {\n                value: pathState.value,\n                onChange,\n                onInput,\n                onBlur,\n            };\n            if (isCallable(config)) {\n                return Object.assign(Object.assign({}, base), (config(omit(pathState, PRIVATE_PATH_STATE_KEYS)).attrs || {}));\n            }\n            if (config === null || config === void 0 ? void 0 : config.mapAttrs) {\n                return Object.assign(Object.assign({}, base), config.mapAttrs(omit(pathState, PRIVATE_PATH_STATE_KEYS)));\n            }\n            return base;\n        });\n        return props;\n    }\n    return Object.assign(Object.assign({}, formCtx), { values: readonly(formValues), handleReset: () => resetForm(), submitForm,\n        defineComponentBinds,\n        defineInputBinds });\n}\n/**\n * Manages form meta aggregation\n */\nfunction useFormMeta(pathsState, currentValues, initialValues, errors) {\n    const MERGE_STRATEGIES = {\n        touched: 'some',\n        pending: 'some',\n        valid: 'every',\n    };\n    const isDirty = computed(() => {\n        return !isEqual(currentValues, unref(initialValues));\n    });\n    function calculateFlags() {\n        const states = pathsState.value;\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n            const mergeMethod = MERGE_STRATEGIES[flag];\n            acc[flag] = states[mergeMethod](s => s[flag]);\n            return acc;\n        }, {});\n    }\n    const flags = reactive(calculateFlags());\n    watchEffect(() => {\n        const value = calculateFlags();\n        flags.touched = value.touched;\n        flags.valid = value.valid;\n        flags.pending = value.pending;\n    });\n    return computed(() => {\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\n    });\n}\n/**\n * Manages the initial values prop\n */\nfunction useFormInitialValues(pathsState, formValues, opts) {\n    const values = resolveInitialValues(opts);\n    const providedValues = opts === null || opts === void 0 ? void 0 : opts.initialValues;\n    // these are the mutable initial values as the fields are mounted/unmounted\n    const initialValues = ref(values);\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n    // so these are the values that the reset function should use\n    // these only change when the user explicitly changes the initial values or when the user resets them with new values.\n    const originalInitialValues = ref(klona(values));\n    function setInitialValues(values, updateFields = false) {\n        initialValues.value = merge(klona(initialValues.value) || {}, klona(values));\n        originalInitialValues.value = merge(klona(originalInitialValues.value) || {}, klona(values));\n        if (!updateFields) {\n            return;\n        }\n        // update the pristine non-touched fields\n        // those are excluded because it's unlikely you want to change the form values using initial values\n        // we mostly watch them for API population or newly inserted fields\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n        pathsState.value.forEach(state => {\n            const wasTouched = state.touched;\n            if (wasTouched) {\n                return;\n            }\n            const newValue = getFromPath(initialValues.value, state.path);\n            setInPath(formValues, state.path, klona(newValue));\n        });\n    }\n    if (isRef(providedValues)) {\n        watch(providedValues, value => {\n            if (value) {\n                setInitialValues(value, true);\n            }\n        }, {\n            deep: true,\n        });\n    }\n    return {\n        initialValues,\n        originalInitialValues,\n        setInitialValues,\n    };\n}\n\nconst FormImpl = /** #__PURE__ */ defineComponent({\n    name: 'Form',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: String,\n            default: 'form',\n        },\n        validationSchema: {\n            type: Object,\n            default: undefined,\n        },\n        initialValues: {\n            type: Object,\n            default: undefined,\n        },\n        initialErrors: {\n            type: Object,\n            default: undefined,\n        },\n        initialTouched: {\n            type: Object,\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        onSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        onInvalidSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        keepValues: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    setup(props, ctx) {\n        const initialValues = toRef(props, 'initialValues');\n        const validationSchema = toRef(props, 'validationSchema');\n        const keepValues = toRef(props, 'keepValues');\n        const { errors, errorBag, values, meta, isSubmitting, isValidating, submitCount, controlledValues, validate, validateField, handleReset, resetForm, handleSubmit, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, resetField, } = useForm({\n            validationSchema: validationSchema.value ? validationSchema : undefined,\n            initialValues,\n            initialErrors: props.initialErrors,\n            initialTouched: props.initialTouched,\n            validateOnMount: props.validateOnMount,\n            keepValuesOnUnmount: keepValues,\n        });\n        const submitForm = handleSubmit((_, { evt }) => {\n            if (isFormSubmitEvent(evt)) {\n                evt.target.submit();\n            }\n        }, props.onInvalidSubmit);\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n        function handleFormReset(e) {\n            if (isEvent(e)) {\n                // Prevent default form reset behavior\n                e.preventDefault();\n            }\n            handleReset();\n            if (typeof ctx.attrs.onReset === 'function') {\n                ctx.attrs.onReset();\n            }\n        }\n        function handleScopedSlotSubmit(evt, onSubmit) {\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n        }\n        function getValues() {\n            return klona(values);\n        }\n        function getMeta() {\n            return klona(meta.value);\n        }\n        function getErrors() {\n            return klona(errors.value);\n        }\n        function slotProps() {\n            return {\n                meta: meta.value,\n                errors: errors.value,\n                errorBag: errorBag.value,\n                values,\n                isSubmitting: isSubmitting.value,\n                isValidating: isValidating.value,\n                submitCount: submitCount.value,\n                controlledValues: controlledValues.value,\n                validate,\n                validateField,\n                handleSubmit: handleScopedSlotSubmit,\n                handleReset,\n                submitForm,\n                setErrors,\n                setFieldError,\n                setFieldValue,\n                setValues,\n                setFieldTouched,\n                setTouched,\n                resetForm,\n                resetField,\n                getValues,\n                getMeta,\n                getErrors,\n            };\n        }\n        // expose these functions and methods as part of public API\n        ctx.expose({\n            setFieldError,\n            setErrors,\n            setFieldValue,\n            setValues,\n            setFieldTouched,\n            setTouched,\n            resetForm,\n            validate,\n            validateField,\n            resetField,\n            getValues,\n            getMeta,\n            getErrors,\n        });\n        return function renderForm() {\n            // avoid resolving the form component as itself\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (!props.as) {\n                return children;\n            }\n            // Attributes to add on a native `form` tag\n            const formAttrs = props.as === 'form'\n                ? {\n                    // Disables native validation as vee-validate will handle it.\n                    novalidate: true,\n                }\n                : {};\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\n        };\n    },\n});\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\n    const form = injectWithSelf(FormContextKey, undefined);\n    const fields = ref([]);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const noOp = () => { };\n    const noOpApi = {\n        fields,\n        remove: noOp,\n        push: noOp,\n        swap: noOp,\n        insert: noOp,\n        update: noOp,\n        replace: noOp,\n        prepend: noOp,\n        move: noOp,\n    };\n    if (!form) {\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n        return noOpApi;\n    }\n    if (!unref(arrayPath)) {\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n        return noOpApi;\n    }\n    const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n    if (alreadyExists) {\n        return alreadyExists;\n    }\n    let entryCounter = 0;\n    function getCurrentValues() {\n        return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n    }\n    function initFields() {\n        const currentValues = getCurrentValues();\n        if (!Array.isArray(currentValues)) {\n            return;\n        }\n        fields.value = currentValues.map((v, idx) => createEntry(v, idx, fields.value));\n        updateEntryFlags();\n    }\n    initFields();\n    function updateEntryFlags() {\n        const fieldsLength = fields.value.length;\n        for (let i = 0; i < fieldsLength; i++) {\n            const entry = fields.value[i];\n            entry.isFirst = i === 0;\n            entry.isLast = i === fieldsLength - 1;\n        }\n    }\n    function createEntry(value, idx, currentFields) {\n        // Skips the work by returning the current entry if it already exists\n        // This should make the `key` prop stable and doesn't cause more re-renders than needed\n        // The value is computed and should update anyways\n        if (currentFields && !isNullOrUndefined(idx) && currentFields[idx]) {\n            return currentFields[idx];\n        }\n        const key = entryCounter++;\n        const entry = {\n            key,\n            value: computedDeep({\n                get() {\n                    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    return idx === -1 ? value : currentValues[idx];\n                },\n                set(value) {\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    if (idx === -1) {\n                        warn(`Attempting to update a non-existent array item`);\n                        return;\n                    }\n                    update(idx, value);\n                },\n            }),\n            isFirst: false,\n            isLast: false,\n        };\n        return entry;\n    }\n    function afterMutation() {\n        updateEntryFlags();\n        // Should trigger a silent validation since a field may not do that #4096\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'silent' });\n    }\n    function remove(idx) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!pathValue || !Array.isArray(pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        newValue.splice(idx, 1);\n        const fieldPath = pathName + `[${idx}]`;\n        form.markForUnmount(fieldPath);\n        form.unsetInitialValue(fieldPath);\n        setInPath(form.values, pathName, newValue);\n        fields.value.splice(idx, 1);\n        afterMutation();\n    }\n    function push(initialValue) {\n        const value = klona(initialValue);\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [...normalizedPathValue];\n        newValue.push(value);\n        form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n        setInPath(form.values, pathName, newValue);\n        fields.value.push(createEntry(value));\n        afterMutation();\n    }\n    function swap(indexA, indexB) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        // the old switcheroo\n        const temp = newValue[indexA];\n        newValue[indexA] = newValue[indexB];\n        newValue[indexB] = temp;\n        const tempEntry = newFields[indexA];\n        newFields[indexA] = newFields[indexB];\n        newFields[indexB] = tempEntry;\n        setInPath(form.values, pathName, newValue);\n        fields.value = newFields;\n        updateEntryFlags();\n    }\n    function insert(idx, initialValue) {\n        const value = klona(initialValue);\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        newValue.splice(idx, 0, value);\n        newFields.splice(idx, 0, createEntry(value));\n        setInPath(form.values, pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    function replace(arr) {\n        const pathName = unref(arrayPath);\n        form.stageInitialValue(pathName, arr);\n        setInPath(form.values, pathName, arr);\n        initFields();\n        afterMutation();\n    }\n    function update(idx, value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n            return;\n        }\n        setInPath(form.values, `${pathName}[${idx}]`, value);\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'validated-only' });\n    }\n    function prepend(initialValue) {\n        const value = klona(initialValue);\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [value, ...normalizedPathValue];\n        form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n        setInPath(form.values, pathName, newValue);\n        fields.value.unshift(createEntry(value));\n        afterMutation();\n    }\n    function move(oldIdx, newIdx) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n        if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n            return;\n        }\n        const newFields = [...fields.value];\n        const movedItem = newFields[oldIdx];\n        newFields.splice(oldIdx, 1);\n        newFields.splice(newIdx, 0, movedItem);\n        const movedValue = newValue[oldIdx];\n        newValue.splice(oldIdx, 1);\n        newValue.splice(newIdx, 0, movedValue);\n        setInPath(form.values, pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    const fieldArrayCtx = {\n        fields,\n        remove,\n        push,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move,\n    };\n    form.fieldArrays.push(Object.assign({ path: arrayPath, reset: initFields }, fieldArrayCtx));\n    onBeforeUnmount(() => {\n        const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n        if (idx >= 0) {\n            form.fieldArrays.splice(idx, 1);\n        }\n    });\n    // Makes sure to sync the form values with the array value if they go out of sync\n    // #4153\n    watch(getCurrentValues, formValues => {\n        const fieldsValues = fields.value.map(f => f.value);\n        // If form values are not the same as the current values then something overrode them.\n        if (!isEqual(formValues, fieldsValues)) {\n            initFields();\n        }\n    });\n    return fieldArrayCtx;\n}\n\nconst FieldArrayImpl = /** #__PURE__ */ defineComponent({\n    name: 'FieldArray',\n    inheritAttrs: false,\n    props: {\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const { push, remove, swap, insert, replace, update, prepend, move, fields } = useFieldArray(toRef(props, 'name'));\n        function slotProps() {\n            return {\n                fields: fields.value,\n                push,\n                remove,\n                swap,\n                insert,\n                update,\n                replace,\n                prepend,\n                move,\n            };\n        }\n        ctx.expose({\n            push,\n            remove,\n            swap,\n            insert,\n            update,\n            replace,\n            prepend,\n            move,\n        });\n        return () => {\n            const children = normalizeChildren(undefined, ctx, slotProps);\n            return children;\n        };\n    },\n});\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = /** #__PURE__ */ defineComponent({\n    name: 'ErrorMessage',\n    props: {\n        as: {\n            type: String,\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const form = inject(FormContextKey, undefined);\n        const message = computed(() => {\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n        });\n        function slotProps() {\n            return {\n                message: message.value,\n            };\n        }\n        return () => {\n            // Renders nothing if there are no messages\n            if (!message.value) {\n                return undefined;\n            }\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\n            // If no tag was specified and there are children\n            // render the slot as is without wrapping it\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n                return children;\n            }\n            // If no children in slot\n            // render whatever specified and fallback to a <span> with the message in it's contents\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n                return h(tag || 'span', attrs, message.value);\n            }\n            return h(tag, attrs, children);\n        };\n    },\n});\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return function resetForm(state) {\n        if (!form) {\n            return;\n        }\n        return form.resetForm(state);\n    };\n}\n\n/**\n * If a field is dirty or not\n */\nfunction useIsFieldDirty(path) {\n    const fieldOrPath = resolveFieldOrPathState(path);\n    return computed(() => {\n        var _a, _b;\n        if (!fieldOrPath) {\n            return false;\n        }\n        return (_b = ('meta' in fieldOrPath ? fieldOrPath.meta.dirty : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.dirty)) !== null && _b !== void 0 ? _b : false;\n    });\n}\n\n/**\n * If a field is touched or not\n */\nfunction useIsFieldTouched(path) {\n    const fieldOrPath = resolveFieldOrPathState(path);\n    return computed(() => {\n        var _a, _b;\n        if (!fieldOrPath) {\n            return false;\n        }\n        return (_b = ('meta' in fieldOrPath ? fieldOrPath.meta.touched : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.touched)) !== null && _b !== void 0 ? _b : false;\n    });\n}\n\n/**\n * If a field is validated and is valid\n */\nfunction useIsFieldValid(path) {\n    const fieldOrPath = resolveFieldOrPathState(path);\n    return computed(() => {\n        var _a, _b;\n        if (!fieldOrPath) {\n            return false;\n        }\n        return (_b = ('meta' in fieldOrPath ? fieldOrPath.meta.valid : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.valid)) !== null && _b !== void 0 ? _b : false;\n    });\n}\n\n/**\n * If the form is submitting or not\n */\nfunction useIsSubmitting() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form is validating or not\n */\nfunction useIsValidating() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.isValidating.value) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validates a single field\n */\nfunction useValidateField(path) {\n    const form = injectWithSelf(FormContextKey);\n    const field = path ? undefined : inject(FieldContextKey);\n    return function validateField() {\n        if (field) {\n            return field.validate();\n        }\n        if (form && path) {\n            return form === null || form === void 0 ? void 0 : form.validateField(unref(path));\n        }\n        warn(`field with name ${unref(path)} was not found`);\n        return Promise.resolve({\n            errors: [],\n            valid: true,\n        });\n    };\n}\n\n/**\n * If the form is dirty or not\n */\nfunction useIsFormDirty() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form is touched or not\n */\nfunction useIsFormTouched() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form has been validated and is valid\n */\nfunction useIsFormValid() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validate multiple fields\n */\nfunction useValidateForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return function validateField() {\n        if (!form) {\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\n        }\n        return form.validate();\n    };\n}\n\n/**\n * The number of form's submission count\n */\nfunction useSubmitCount() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n    });\n}\n\n/**\n * Gives access to a field's current value\n */\nfunction useFieldValue(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n        }\n        return unref(field === null || field === void 0 ? void 0 : field.value);\n    });\n}\n\n/**\n * Gives access to a form's values\n */\nfunction useFormValues() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\n    });\n}\n\n/**\n * Gives access to all form errors\n */\nfunction useFormErrors() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\n    });\n}\n\n/**\n * Gives access to a single field error\n */\nfunction useFieldError(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n        }\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n    });\n}\n\nfunction useSubmitForm(cb) {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\n    return function submitForm(e) {\n        if (!onSubmit) {\n            return;\n        }\n        return onSubmit(e);\n    };\n}\n\n/**\n * Sets a field's error message\n */\nfunction useSetFieldError(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return function setFieldError(message) {\n        if (path && form) {\n            form.setFieldError(toValue(path), message);\n        }\n        if (field) {\n            field.setErrors(message || []);\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set error for unknown field with path \"${toValue(path)}\"`);\n        }\n    };\n}\n\n/**\n * Sets a field's touched meta state\n */\nfunction useSetFieldTouched(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return function setFieldTouched(touched) {\n        if (path && form) {\n            form.setFieldTouched(toValue(path), touched);\n        }\n        if (field) {\n            field.setTouched(touched);\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set touched meta for unknown field with path \"${toValue(path)}\"`);\n        }\n    };\n}\n\n/**\n * Sets a field's value\n */\nfunction useSetFieldValue(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return function setFieldValue(value, shouldValidate = true) {\n        if (path && form) {\n            form.setFieldValue(toValue(path), value, shouldValidate);\n        }\n        if (field) {\n            field.setValue(value, shouldValidate);\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set value for unknown field with path \"${toValue(path)}\"`);\n        }\n    };\n}\n\n/**\n * Sets multiple fields errors\n */\nfunction useSetFormErrors() {\n    const form = injectWithSelf(FormContextKey);\n    function setFormErrors(fields) {\n        if (form) {\n            form.setErrors(fields);\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set errors because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n        }\n    }\n    return setFormErrors;\n}\n\n/**\n * Sets multiple fields touched or all fields in the form\n */\nfunction useSetFormTouched() {\n    const form = injectWithSelf(FormContextKey);\n    function setFormTouched(fields) {\n        if (form) {\n            form.setTouched(fields);\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set touched state because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n        }\n    }\n    return setFormTouched;\n}\n\n/**\n * Sets multiple fields values\n */\nfunction useSetFormValues() {\n    const form = injectWithSelf(FormContextKey);\n    function setFormValues(fields) {\n        if (form) {\n            form.setValues(fields);\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set form values because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n        }\n    }\n    return setFormValues;\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, normalizeRules, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useIsValidating, useResetForm, useSetFieldError, useSetFieldTouched, useSetFieldValue, useSetFormErrors, useSetFormTouched, useSetFormValues, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate, validateObjectSchema as validateObject };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}